#+title:TypeScript Guide
#+author:Pinecone062
#+date:2019-08-17 09:11
#+macro:version 0.0.22

#+texinfo:@insertcopying

* Source Installation and Update
#+cindex:source
#+cindex:installation
#+cindex:updating

** About TypeScript
TypeScript is a superset of JavaScript that compiles to clean
JavaScript output.

- https://www.typescriptlang.org

** Source Code Repository
TypeScript is being developed on GitHub and is open source.

- https://github.com/Microsoft/TypeScript

** Installation

Installation is performed by Node:

#+name:installation
#+option: :results output :exports none
#+begin_src sh :shebang "#!/usr/bin/env bash"
yarn global add typescript
#+end_src

** Nightly Builds
- [[http://www.typescriptlang.org/docs/handbook/nightly-builds.html][Nightly Builds home]]
- The nightlies are available on [[https://www.myget.org/gallery/typescript-preview][www.myget.org]]

There are two packages:

- Microsoft.TypeScript.Compiler :: Tools only (~tsc.exe~, ~lib.d.ts~,
     etc.)

- Microsoft.TypeScript.MSBuild :: Tools as above, as well as MSBuild
     tasks and targets (Microsoft.TypeScript.targets,
     Microsoft.TypeScript.Default.props, etc.)


{{{heading(Using npm)}}}

A nightly build from the TypeScript’s master branch is published by
midnight PST to NPM and NuGet.  Here is how you can get it and use it
with your tools:

: npm install -g typescript@next

* Configuration and Compilation
** The ~tsconfig~ File
#+cindex:schema, @file{tsconfig.json}
#+cindex:@file{tsconfig.json} schema
Schema for the ~tsconfig.json~ file can be found at:
- http://json.schemastore.org/tsconfig


#+cindex:@file{tsconfig.json} file
#+cindex: configuration
#+cindex:TypeScript project
#+cindex:project, TypeScript
#+cindex:root files, TypeScript project
#+cindex:compiler options
The presence of a ~tsconfig.json~ file in a directory indicates that
the directory is the root of a TypeScript project.

A ~tsconfig.json~ file specifies:

- the root files
- the compiler options


{{{noindent}}}required to compile the project.

A ~tsconfig.json~ file is permitted to be completely empty, which
compiles all files included by default with the default compiler
options.  Compiler options specified on the command line override
those specified in the ~tsconfig.json~ file.

*** The =compilerOptions= Property
#+cindex:@code{compilerOptions} property
#+cindex:default compiler options
#+cindex:compiler options, defaults
The =compilerOptions= property can be omitted, in which case the
compiler’s defaults are used.

**** List of Compiler Options
For a complete list of compiler options, see:
- http://www.typescriptlang.org/docs/handbook/compiler-options.html


#+cindex:compiler options, list
#+attr_texinfo: :indic code
- --allowJs :: boolean =false=
- --allowSyntheticDefaultImports :: boolean module === "system" or
     --esModuleInterop
- --allowUmdGlobalAccess :: boolean =false=
- --allowUnreachableCode :: boolean =false=
- --allowUnusedLabels :: boolean =false=
- --alwaysStrict :: boolean false
- --baseUrl :: string; See [[http://www.typescriptlang.org/docs/handbook/module-resolution.html#base-url][Module Resolution documentation]]
- --build -b :: boolean =false=
- --charset :: string "utf8"
- --checkJs :: boolean =false=
- --composite :: boolean =true=
- --declaration -d :: boolean =false=
- --declarationDir :: string
- --declarationMap :: boolean =false=
- --diagnostics :: boolean =false=
- --disableSizeLimit :: boolean =false=
- --downlevelIteration :: boolean =false=
- --emitBOM :: boolean =false=
- --emitDeclarationOnly :: boolean =false=
- --emitDecoratorMetadata :: boolean =false=
- --esModuleInterop :: boolean =false=
- --experimentalDecorators :: boolean =false=
- --extendedDiagnostics :: boolean =false=
- --forceConsistentCasingInFileNames :: boolean =false=
- --help -h :: empty
- --importHelpers :: boolean =false=
- --incremental :: boolean =true= if composite; =false= otherwise
- --inlineSourceMap :: boolean =false=
- --inlineSources :: boolean =false=
- --init :: empty
- --isolatedModules :: boolean =false=
- --jsx :: string "preserve" | "react" | "react-native"
- --jsxFactory :: string "React.createElement" | "h"
- --keyofStringsOnly :: boolean =false=
- --lib :: string[] [default list of libraries are injected]
- --listEmittedFiles :: boolean =false=
- --listFiles :: boolean =false=
- --locale :: string "en"
- --mapRoot :: string
- --maxNodeModuleJsDepth :: number 0
- --module -m :: string target === "ES3" or "ES5" ? "CommonJS" : "ES6"
- --moduleResolution :: string module === "AMD" or "System" or "ES6" ?
     "Classic" : "Node"
- --newLine :: string "lf"
- --noEmit :: boolean =false=
- --noEmitHelpers :: boolean =false=
- --noEmitOnError :: boolean =false=
- --noErrorTruncation :: boolean =false=
- --noFallthroughCasesInSwitch :: boolean =false=
- --noImplicitAny :: boolean =false=
- --noImplicitReturns :: boolean =false=
- --noImplicitThis :: boolean =false=
- --noImplicitUseStrict :: boolean =false=
- --noLib :: boolean =false=
- --noResolve :: boolean =false=
- --noStrictGenericChecks :: boolean =false=
- --noUnusedLocals :: boolean =false=
- --noUnusedParameters :: boolean =false=
- --outDir :: string
- --outFile :: string
- paths :: Object
- --preserveConstEnums :: boolean =false=
- --preserveSymlinks :: boolean =false=
- --preserveWatchOutput :: boolean =false=
- --pretty :: boolean =true= unless piping or redirecting
- --project -p :: string
- --reactNamespace :: deprecated; use {{{option(--jsxFactory)}}}
- --removeComments :: boolean =false=
- --resolveJsonModule :: boolean =false=
- --rootDir :: string [computed from input files]
- rootDirs :: string[]
- --showConfig :: boolean =false=
- --skipDefaultLibCheck :: boolean =false=
- --skipLibCheck :: boolean =false=
- --sourceMap :: boolean =false=
- --sourceRoot :: string
- --strict :: boolean =false=
- --strictBindCallApply :: boolean =false=
- --strictFunctionTypes :: boolean =false=
- --strictPropertyInitialization :: boolean =false=
- --strictNullChecks :: boolean =false=
- --suppressExcessPropertyErrors :: boolean =false=
- --suppressImplicitAnyIndexErrors :: boolean =false=
- --target -t :: string "ES3"
- --traceResolution :: boolean =false=
- --tsBuildInfoFile :: boolean =false=
- --types :: string[]
- --typeRoots :: string[]
- --version -v :: [empty]
- --watch -w :: [empty]

*** The =files= and =include= and =exclude= Properties

#+cindex:@code{files} property
#+cindex:@code{include} property
#+cindex:@code{exclude} property
Files and can included or excluded from a project by using a
combination of the =files=, the =include=, and the =exclude=
properties, and the =outDir= compiler option in the ~tsconfig.json~
file.

{{{subheading(Include Defaults)}}}

If the =files= and =include= properties are both left unspecified, the
compiler defaults to including all TypeScript files in the containing
directory and subdirectories except those excluded using the =exclude=
property.  (See below for default extensions.)  JS files (see below)
are also included if =allowJs= is set to =true=.

{{{subheading(Including Files)}}}

If the =files= and/or =include= properties are specified, the compiler
will instead include the union of the files included by those two
properties.

Any files that are referenced via the =files= or =include= properties
are included.  Files included using =include= can be filtered using
the =exclude= property, but files included explicitly using the
=files= property are always included regardless of =exclude=.

Files in the directory specified using the =outDir= compiler option
are excluded as long as =exclude= property is /not/ specified.

If a file ~B.ts~ is referenced by another file ~A.ts~, then ~B.ts~
cannot be excluded unless the referencing file ~A.ts~ is also
specified in the =exclude= list.  The compiler does not include files
that can be possible outputs; e.g. if the input includes ~index.ts~,
then ~index.d.ts~ and ~index.js~ are excluded.

**** The =files= Property
#+cindex:@code{files} property
The =files= property takes a list of relative or absolute file paths.

**** The =include= and =exclude= Properties
#+cindex:@code{include} property
#+cindex:@code{exclude} property
#+cindex:glob patterns
#+cindex:wildcards, glob
The =include= and =exclude= properties take a list of glob-like file
patterns.  The supported glob wildcards are:

- =*= :: matches zero or more characters (excluding directory
         separators)

         If a segment of a glob pattern includes only =*= or =.*=,
         then only files with supported extensions are included.
         Supported extensions include:

  - =.ts=

  - =.tsx=

  - =.d.ts=

    If =allowJs= is set to =true=:

  - =.js=

  - =.jsx=

- =?= :: matches any one character (excluding directory separators)

- =**/= :: recursively matches any subdirectory


#+cindex:@file{node_modules}
#+cindex:@file{bower_components}
#+cindex:@file{jspm_packages}
#+cindex:@code{outDir} property
=exclude= by default excludes the following directories:

- ~node_modules~
- ~bower_components~
- ~jspm_packages~
- =outDir=

**** Including and Excluding Types Packages

#+cindex:types package
#+cindex:@file{index.d.ts} file
#+cindex:@code{types} field
A /types package/ is a folder with a file called ~index.d.ts~ or a
folder with a ~package.json~ that has a =types= field.

{{{subheading(Include @types Packages)}}}

#+cindex:@code{@@types} packages
By default all visible =@@types= packages are included in your
compilation.  Packages in ~node_modules/@types~ of any enclosing
folder are considered visible.  That means packages within the
following directores are visible:

- ~./node_modules/@types/~
- ~../node_modules/@types/~
- ~../../node_modules/@types/~


Automatic inclusion is only important if you’re using files with
global declarations (as opposed to files declared as modules).  If you
use an =import "foo"= statement, for instance, TypeScript may still
look through ~node_modules~ and ~node_modules/@types~ folders to find
the ~foo~ package.

{{{subheading(Exclude @types Packages)}}}

Specify ="types": []= to disable automatic inclusion of =@types=
packages.

{{{heading(typeRoots)}}}

If =typeRoots= is specified, only packages under =typeRoots= will be
included.  This config file will include all packages under
~./typings~, and no packages from ~./node_modules/@types~.

#+begin_src js
{
   "compilerOptions": {
       "typeRoots" : ["./typings"]
   }
}
#+end_src

{{{heading(types)}}}

If types is specified, only packages listed will be included.  This
~tsconfig.json~ file will only include ~./node_modules/@types/node~,
~./node_modules/@types/lodash~ and ~./node_modules/@types/express~.
Other packages under ~node_modules/@types/*~ will not be included.

#+begin_src js
{
   "compilerOptions": {
       "types" : ["node", "lodash", "express"]
   }
}
#+end_src

*** Example tsconfig.json Files
{{{heading("Files" Property)}}}

#+caption:tsconfig.json using the "files" property
#+name:tsconfig.json-using-files-property
#+begin_src js -n
{
    "compilerOptions": {
        "module": "commonjs",
        "noImplicitAny": true,
        "removeComments": true,
        "preserveConstEnums": true,
        "sourceMap": true
    },
    "files": [
        "core.ts",
        "sys.ts",
        "types.ts",
        "scanner.ts",
        "parser.ts",
        "utilities.ts",
        "binder.ts",
        "checker.ts",
        "emitter.ts",
        "program.ts",
        "commandLineParser.ts",
        "tsc.ts",
        "diagnosticInformationMap.generated.ts"
    ]
}
#+end_src

{{{heading("Include" and "Exclude" Properties)}}}

#+caption:tsconfig using the "include" and "exclude" properties
#+name:tsconfig.json-using-include-and-exclude-properties
#+begin_src js -n
{
    "compilerOptions": {
        "module": "system",
        "noImplicitAny": true,
        "removeComments": true,
        "preserveConstEnums": true,
        "outFile": "../../built/local/tsc.js",
        "sourceMap": true
    },
    "include": [
        "src/**/*"
    ],
    "exclude": [
        "node_modules",
        "**/*.spec.ts"
    ]
}
#+end_src
*** Extending Configuration
A ~tsconfig.json~ file can inherit configurations from another file
using the =extends= property.  The =extends= property is a top-level
property, along with =compilerOptions=, =files=, =includes=, and
=excludes.=.  The =extends= value is a string containing a path to
another configuration file to inherit from.

The configuration from the base file is loaded first, then overridden
by those in the inheriting config file.  If a circularity is
encountered, an error is reported.  All relative paths found in the
configuration file will be resolved relative to the configuration file
they originated in.

**** Example ~tsconfig.json~ Using =extends=
#+name:configs-base.json
#+begin_src js
{
  "compilerOptions": {
    "noImplicitAny": true,
    "strictNullChecks": true
  }
}
#+end_src

#+name:tsconfig.json-using-extends
#+begin_src js
{
  "extends": "./configs/base",
  "files": [
    "main.ts",
    "supplemental.ts"
  ]
}
#+end_src

#+name:tsconfig-nostrictnull
#+begin_src js
{
  "extends": "./tsconfig",
  "compilerOptions": {
    "strictNullChecks": false
  }
}
#+end_src

*** CompileOnSave
Setting a top-level property =compileOnSave= signals to the IDE to
generate all files for a given ~tsconfig.json~ upon saving.  This
feature is currently supported in Visual Studio 2015 with TypeScript
1.8.4 and above, and atom-typescript plugin.

#+name:tsconfig.json-compile-on-save
#+begin_src js
{
   "compileOnSave": true,
   "compilerOptions": {
       "noImplicitAny" : true
   }
}
#+end_src

** Compilation of a TypeScript Project

#+cindex:compilation
#+cindex:@file{tsconfig.json}
A project is compiled:

{{{heading(Using tsconfig.json)}}}

- By invoking {{{command(tsc)}}} with no input files, in which case
  the compiler searches for the ~tsconfig.json~ file starting in the
  current directory and continuing up the parent directory chain.

- By invoking {{{command(tsc)}}} with no input files and an
  {{{option(--project)}}} (or just {{{option(-p)}}}) command line
  option that specifies the path of a directory containing a
  ~tsconfig.json~ file, or a path to a valid ~.json~ file containing
  the configurations.


{{{heading(With Input Files)}}}

- By invoking {{{command(tsc)}}} with input files on the command line,
  in which case a ~tsconfig.json~ files are ignored.

** Project References
- http://www.typescriptlang.org/docs/handbook/project-references.html


#+cindex:project reference
/Project references/ are a new feature in TypeScript 3.0 that allow
you to structure your TypeScript programs into smaller pieces.  By
doing this, you can:

- greatly improve build times
- enforce logical separation between components
- organize your code in new and better ways


There is also a new mode for {{{command(tsc)}}}, the
{{{option(--build)}}} flag that works hand in hand with project
references to enable faster TypeScript builds.

*** The =references= Property
~tsconfig.json~ files have a new top-level property, =references=.
It’s an array of objects that specifies projects to reference:

#+name:tsconfig-with-references
#+begin_src js
{
    "compilerOptions": {
        // The usual
    },
    "references": [
        { "path": "../src" }
    ]
}
#+end_src

The =path= property of each reference can point to a directory
containing a ~tsconfig.json~ file, or to the config file itself (which
may have any name).

When you reference a project, new things happen:

- Importing modules from a referenced project will instead load its
  output declaration file (~.d.ts~)

- If the referenced project produces an =outFile=, the output file
  ~.d.ts~ file’s declarations will be visible in this project

- Build mode (see below) will automatically build the referenced
  project if needed


By separating into multiple projects, you can greatly improve the
speed of typechecking and compiling, reduce memory usage when using an
editor, and improve enforcement of the logical groupings of your
program

*** The =composite= Property
Referenced projects must have the new =composite= setting enabled.
This setting is needed to ensure TypeScript can quickly determine
where to find the outputs of the referenced project.

Enabling the composite flag changes a few things:

- The =rootDir= setting, if not explicitly set, defaults to the
  directory containing the ~tsconfig~ file

- All implementation files must be matched by an =include= pattern or
  listed in the files array.  If this constraint is violated, ~tsc~
  will inform you which files weren’t specified

- =declaration= must be turned on

*** The =prepend= Property
You can also enable prepending the output of a dependency using the
=prepend= option in a reference:

#+name:tsconfig-using-prepend
#+begin_src js
"references": [
       { "path": "../utils", "prepend": true }
   ]
#+end_src

Prepending a project will include the project’s output above the
output of the current project.  This works for both ~.js~ files and
~.d.ts~ files, and source map files will also be emitted correctly.

*** Build Mode
To preserve compatibility with existing build workflows, ~tsc~ will
not automatically build dependencies unless invoked with the
{{{option(--build)}}} switch.

A long-awaited feature is /smart incremental builds/ for TypeScript
projects.  In 3.0 you can use the {{{option(--build)}}} flag with
~tsc~.  This is effectively a new entry point for ~tsc~ that behaves
more like a build orchestrator than a simple compiler.

Running ~tsc --build~ (~tsc -b~ for short) will do the following:

- Find all referenced projects

- Detect if they are up-to-date

- Build out-of-date projects in the correct order


You can provide ~tsc -b~ with multiple config file paths (e.g. ~tsc -b
src test~).  Specifying the config file name itself is unnecessary if
it’s named ~tsconfig.json~.

You can specify any number of config files:

#+begin_example
> tsc -b                            # Use the tsconfig.json in the current directory
> tsc -b src                        # Use src/tsconfig.json
> tsc -b foo/prd.tsconfig.json bar  # Use foo/prd.tsconfig.json and bar/tsconfig.json
#+end_example

There are also some flags specific to tsc -b:

#+attr_texinfo: :indic option
- --verbose :: Prints out verbose logging to explain what’s going on
               (may be combined with any other flag)

- --dry :: Shows what would be done but doesn’t actually build anything

- --clean :: Deletes the outputs of the specified projects (may be
             combined with {{{option(--dry)}}})

- --force :: Act as if all projects are out of date

- --watch :: Watch mode (may not be combined with any flag except
             {{{option(--verbose)}}})

** Integrating with Build Tools

#+cindex:build tools
*** Babel
#+cindex:babel
{{{heading(Install Babel)}}}

: npm install @babel/cli @babel/core @babel/preset-typescript --save-dev

#+cindex:@file{.babelrc}
{{{heading(.babelrc File)}}}

#+begin_src js
{
  "presets": ["@babel/preset-typescript"]
}
#+end_src

{{{heading(Using Command Line Interface)}}}

: ./node_modules/.bin/babel --out-file bundle.js src/index.ts

{{{heading(package.json File)}}}

#+begin_src js
{
  "scripts": {
    "build": "babel --out-file bundle.js main.ts"
  },
}
#+end_src

{{{heading(Execute Babel from the command line)}}}

: npm run build
*** Browserify
{{{heading(Install Browserify)}}}

: npm install tsify

See:
- [[https://github.com/TypeStrong/tsify][tsify---Browsify plugin for TypeScript]]

{{{heading(Using Command Line Interface)}}}

: $ browserify main.ts -p [ tsify --noImplicitAny ] > bundle.js

{{{heading(Using API)}}}

#+begin_src js
var browserify = require("browserify");
var tsify = require("tsify");

browserify()
    .add("main.ts")
    .plugin("tsify", { noImplicitAny: true })
    .bundle()
    .pipe(process.stdout);
#+end_src
*** Duo
~due-typescript~: The typescript compiler plugin for ~duo~

See:
- [[https://github.com/frankwallis/duo-typescript][due-typescript]]
*** Grunt
TypeScript Compilation Task for GruntJS

{{{heading(Install grunt-ts)}}}

: npm install grunt-ts

See:
- [[https://github.com/TypeStrong/grunt-ts][grunt-ts]]

{{{heading(Basic Gruntfile.js File)}}}

#+begin_src js
module.exports = function(grunt) {
    grunt.initConfig({
        ts: {
            default : {
                src: ["**/*.ts", "!node_modules/**/*.ts"]
            }
        }
    });
    grunt.loadNpmTasks("grunt-ts");
    grunt.registerTask("default", ["ts"]);
};
#+end_src
*** Gulp
- [[https://github.com/ivogabe/gulp-typescript][gulp-typescript]] :: A gulp plugin for handling TypeScript compilation
     workflow.

{{{heading(Install gulp-typescript)}}}

: npm install gulp-typescript

{{{heading(Basic gulpfile.js)}}}

#+begin_src js
var gulp = require("gulp");
var ts = require("gulp-typescript");

gulp.task("default", function () {
    var tsResult = gulp.src("src/*.ts")
        .pipe(ts({
              noImplicitAny: true,
              out: "output.js"
        }));
    return tsResult.js.pipe(gulp.dest("built/local"));
});
#+end_src
*** Jspm
- [[https://github.com/Microsoft/TypeScriptSamples/tree/master/jspm][jspm]]
*** Webpack
- [[https://www.npmjs.com/package/ts-loader][ts-loader]] :: TypeScript loader for webpack

{{{heading(Install ts-loader)}}}

: npm install ts-loader --save-dev

{{{heading(Basic webpack.config.js when using Webpack 2)}}}

#+begin_src js
module.exports = {
    entry: "./src/index.tsx",
    output: {
        path: '/',
        filename: "bundle.js"
    },
    resolve: {
        extensions: [".tsx", ".ts", ".js", ".json"]
    },
    module: {
        rules: [
            // all files with a '.ts' or '.tsx' extension will be handled by 'ts-loader'
            { test: /\.tsx?$/, use: ["ts-loader"], exclude: /node_modules/ }
        ]
    }
}
#+end_src
** An Example
In your editor, type the following JavaScript code in ~greeter.ts~:

#+name:greater0.ts
#+header: :mkdirp yes
#+begin_src js :tangle examples/greeter0.ts
function greeter(person) {
    return "Hello, " + person;
}

let user = "Jane User";

document.body.textContent = greeter(user);
#+end_src

{{{heading(Compiling the Code)}}}

We used a ~.ts~ extension, but this code is just JavaScript.  You could
have copy/pasted this straight out of an existing JavaScript app.

At the command line, run the TypeScript compiler:

#+name:compile-greeter0.ts
#+header: :results output :exports both :dir examples
#+begin_src sh
tsc greeter0.ts
#+end_src

The result will be a file ~greeter0.js~ which contains the same
JavaScript that you fed in.  We’re up and running using TypeScript in
our JavaScript app!

Now we can start taking advantage of some of the new tools TypeScript
offers.  Add a =: string= type annotation to the ‘person’ function
argument as shown here:

#+name:greeter1.ts
#+begin_src js :tangle examples/greeter1.ts
function greeter(person: string) {
    return "Hello, " + person;
}

let user = "Jane User";

document.body.textContent = greeter(user);
#+end_src

#+name:compile-greet2.ts
#+begin_src sh :results output :exports both :dir examples
tsc greeter1.ts
#+end_src

*** Type Annotations
#+cindex:type annotation
Type annotations in TypeScript are lightweight ways to record the
intended contract of the function or variable.  In this case, we
intend the ~greeter~ function to be called with a single string
parameter.  We can try changing the call ~greeter~ to pass an array
instead:

#+name:greeter-wrong.ts
#+begin_src js :tangle examples/greeter-error.ts
function greeter(person: string) {
    return "Hello, " + person;
}

let user = [0, 1, 2];

document.body.textContent = greeter(user);
#+end_src

Re-compiling, you’ll now see an error:

#+name:compile-greeter-error.ts
#+begin_src sh :results output :exports both :dir examples
tsc greet-wrong.ts
#+end_src

: error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'string'.

Similarly, try removing all the arguments to the greeter call.
TypeScript will let you know that you have called this function with
an unexpected number of parameters.  In both cases, TypeScript can
offer static analysis based on both the structure of your code, and
the type annotations you provide.

Notice that although there were errors, the ~greeter.js~ file is still
created.  You can use TypeScript even if there are errors in your
code.  But in this case, TypeScript is warning that your code will
likely not run as expected.

*** Interfaces
Let’s develop our sample further.  Here we use an interface that
describes objects that have a =firstName= and =lastName= field.  In
TypeScript, two types are compatible if their internal structure is
compatible.  This allows us to implement an interface just by having
the shape the interface requires, without an explicit implements
clause.

#+name:greeter-interface.ts
#+begin_src js :tangle examples/greeter-interface.ts
interface Person {
    firstName: string;
    lastName: string;
}

function greeter(person: Person) {
    return "Hello, " + person.firstName + " " + person.lastName;
}

let user = { firstName: "Jane", lastName: "User" };

document.body.textContent = greeter(user);
#+end_src

#+name:compile-greeter-interface.ts
#+begin_src sh :results output :exports both :dir examples
tsc greeter-interface.ts
#+end_src

*** Classes
Finally, let’s extend the example one last time with classes.
TypeScript supports new features in JavaScript, like support for
class-based object-oriented programming.

Here we’re going to create a =Student= class with a constructor and a
few public fields.  Notice that classes and interfaces play well
together, letting the programmer decide on the right level of
abstraction.

Also of note, the use of =public= on arguments to the constructor is a
shorthand that allows us to automatically create properties with that
name.

#+name:greeter-class.ts
#+begin_src js :tangle examples/greeter-class.ts
class Student {
    fullName: string;
    constructor(public firstName: string, public middleInitial: string, public lastName: string) {
        this.fullName = firstName + " " + middleInitial + " " + lastName;
    }
}

interface Person {
    firstName: string;
    lastName: string;
}

function greeter(person: Person) {
    return "Hello, " + person.firstName + " " + person.lastName;
}

let user = new Student("Jane", "M.", "User");

document.body.textContent = greeter(user);
#+end_src

#+name:compile-greeter-class.ts
#+begin_src sh :results output :exports both :dir examples
tsc greeter-class.ts
#+end_src

Run ~tsc greeter-class.ts~ and you’ll see the generated JavaScript is
the same as the earlier code.  Classes in TypeScript are just a
shorthand for the same prototype-based OO that is frequently used in
JavaScript.

*** Running your TypeScript Web App
Now type the following in ~greeter.html~:

#+name:greeter.html
#+begin_src html :tangle examples/greeter.html
<!DOCTYPE html>
<html>
    <head><title>TypeScript Greeter</title></head>
    <body>
        <script src="greeter-class.js"></script>
    </body>
</html>
#+end_src

Open ~greeter.html~ in the browser to run your first simple TypeScript
web application!

#+name:open-greeter-class.html
#+begin_src sh :results output :exports both :dir examples
open greeter.html
#+end_src
* Types
#+cindex:types
** Boolean
#+cindex:boolean type
- =true=
- =false=


: let isDone: boolean = false;

** Number
#+cindex:number type
All numbers are floating-point values; numbers include binary, octal,
hexadecimal and decimal literals.

: let decimal: number = 6;
: let hex: number = 0xf00d;
: let binary: number = 0b1010;
: let octal: number = 0o744;

** String
#+cindex:string type
The type =string= refers to the textual datatype.  TypeScript uses
either double quotes or single quotes to surround string data.

: let color: string = "blue";
: color = 'red';

{{{heading(Template Strings)}}}

Template strings are strings surrounded by the backtick or backquote
character (=`=); template strings can span multiple lines and allow
embedded expressions using the syntax =${ expr }=.

: let sentence: string = `Hello, my name is ${ fullName }.`

** Array
#+cindex:array type
Array types can be written in one of two ways.

In the first, you use the type of the elements followed by =[]= to
denote an array of that element type:

: let list: number[] = [1, 2, 3];

The second way uses a generic array type, =Array<elemType>=:

: let list: Array<number> = [1, 2, 3];

** Tuple
#+cindex:tuple type
Tuple types allow you to express an array with a fixed number of
elements whose types are known, but need not be the same.

To represent a value as a pair of a string and a number:

#+begin_src js
// Declare a tuple type
let x: [string, number];
// Initialize it
x = ["hello", 10]; // OK
// Initialize it incorrectly
x = [10, "hello"]; // Error
#+end_src

When accessing an element with a known index, the correct type is
retrieved:

: console.log(x[0].substring(1)); // OK

** Enum
#+cindex:enum type
An enum is a way of giving more friendly names to sets of numeric
values.

#+begin_src js
enum Color {Red, Green, Blue}
let c: Color = Color.Green;
#+end_src

{{{heading(Enum Numbering)}}}

By default, enums begin numbering their members starting at 0.  You
can change this by manually setting the value of one of its members.
For example, we can start the previous example at 1 instead of 0:

#+begin_src js
enum Color {Red = 1, Green, Blue}
let c: Color = Color.Green;
#+end_src

{{{subheading(Manual Enum Numbering)}}}

Or, even manually set all the values in the enum:

#+begin_src js
enum Color {Red = 1, Green = 2, Blue = 4}
let c: Color = Color.Green;
#+end_src

{{{subheading(Enum Values to Name)}}}

A handy feature of enums is that you can also go from a numeric value
to the name of that value in the enum.  For example, if we had the
value 2 but weren’t sure what that mapped to in the Color enum above,
we could look up the corresponding name:

#+begin_src js
enum Color {Red = 1, Green, Blue}
let colorName: string = Color[2];

console.log(colorName); // Displays 'Green' as its value is 2 above
#+end_src

** Any
#+cindex:any type
We may need to describe the type of variables that we do not know when
we are writing an application.  These values may come from dynamic
content, e.g. from the user or a 3rd party library.  In these cases,
we want to opt-out of type checking and let the values pass through
compile-time checks.  To do so, we label these with the =any= type:

#+begin_src js
let notSure: any = 4;
notSure = "maybe a string instead";
notSure = false; // okay, definitely a boolean
#+end_src

{{{heading(Objects and Type =any=)}}}

Variables of type =Object= only allow you to assign =any= value to
them.  You can’t call arbitrary methods on them, even ones that
actually exist:

#+begin_src js
let notSure: any = 4;
notSure.ifItExists(); // okay, ifItExists might exist at runtime
notSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check)

let prettySure: Object = 4;
prettySure.toFixed(); // Error: Property 'toFixed' doesn't exist on type 'Object'.
#+end_src

The =any= type is also handy if you know some part of the type, but
perhaps not all of it.  For example, you may have an array but the
array has a mix of different types:

#+begin_src js
let list: any[] = [1, true, "free"];

list[1] = 100;
#+end_src

** Void
#+cindex:void type
The =void= type denotes the absence of having any type at all.  You
may commonly see this as the return type of functions that do not
return a value:

#+begin_src js
function warnUser(): void {
    console.log("This is my warning message");
}
#+end_src

Declaring variables of type =void= is not useful because you can only
assign =undefined= or =null= to them.

** Null
#+cindex:null type
The type =null= is the only value of this type.  It is a subtype of
all other types, though, which means you can assign =null= to any
other type, unless {{{option(--strictNullChecks)}}} is used, in which
case =null= can only be assigned to an =any= type.

** Undefined
#+cindex:undefined type
The type =undefined= is the only value of this type.  It is a subtype
of all other types as is =null=.  When
{{{option(--stringNullChecks)}}} is used, =undefined= can be assigned
to a type of =any= and =void=.

** Union Type
#+cindex:union type
In cases where you want to pass in either a =string= or =null= or
=undefined=, you can use the =union= type =string | null | undefined=.

** Never
#+cindex:never type
The =never= type represents the type of values that never occur.  For
instance, =never= is the return type for a function expression or an
arrow function expression that always throws an exception or one that
never returns.  Variables also acquire the type =never= when narrowed by
any type guards that can never be true.

The =never= type is a subtype of, and assignable to, every type;
however, no type is a subtype of, or assignable to, =never= (including
=any=).

Some examples of functions returning never:

#+begin_src js
// Function returning never must have unreachable end point
function error(message: string): never {
    throw new Error(message);
}

// Inferred return type is never
function fail() {
    return error("Something failed");
}

// Function returning never must have unreachable end point
function infiniteLoop(): never {
    while (true) {
    }
}
#+end_src

** Object
#+cindex:object type
The =object= is a type that represents the non-primitive type,
i.e. anything that is not =number=, =string=, =boolean=, =symbol=,
=null=, or =undefined=.

With object type, APIs like ~Object.create~ can be better
represented.  For example:

#+begin_src js
declare function create(o: object | null): void;

create({ prop: 0 }); // OK
create(null); // OK

create(42); // Error
create("string"); // Error
create(false); // Error
create(undefined); // Error
#+end_src

** Type Assertions
#+cindex:type assertions
Sometimes you’ll end up in a situation where you’ll know more about a
value than TypeScript does. Usually this will happen when you know the
type of some entity could be more specific than its current type.

/Type assertions/ are a way to tell the compiler “trust me, I know
what I’m doing.”  A type assertion is like a type cast in other
languages, but performs no special checking or restructuring of data.
It has no runtime impact, and is used purely by the compiler.
TypeScript assumes that you, the programmer, have performed any
special checks that you need.

Type assertions have two forms (that is, the forms are equivalent
symantically).

1. the “angle-bracket” syntax:

#+begin_src js
let someValue: any = "this is a string";

let strLength: number = (<string>someValue).length;
#+end_src

2. the other is the as-syntax:

#+begin_src js
let someValue: any = "this is a string";

let strLength: number = (someValue as string).length;
#+end_src

When using TypeScript with JSX, only =as=-style assertions are
allowed.
* Variables
** Var
*** Var Scoping Rules
{{{heading(Function Scope)}}}

#+cindex:function scope
#+cindex:@code{var} declaration
=var= declarations are accessible anywhere within their containing
function, module, namespace, or global scope regardless of the
containing block.  Parameters are also function scoped.

{{{subheading(Problems with Function Scope)}}}

One problem they exacerbate is the fact that it is not an error to
declare the same variable multiple times.  Variables can be
accidentally overwritten this way.

This also occurs within for-loops:

#+begin_src js
for (var i = 0; i < 10; i++) {
    setTimeout(function() { console.log(i); }, 100 * i);
}
#+end_src

{{{noindent}}}which produces the following output:

#+begin_example
10
10
10
10
10
10
10
10
10
10
#+end_example

~setTimeout~ will run a function after some number of milliseconds,
but only after the for loop has stopped executing; by the time the for
loop has stopped executing, the value of ~i~ is 10.  So each time the
given function gets called, it will print out 10!

#+cindex:IIFE
#+cindex:immediately invoked function expression
A common work around is to use an IIFE - an Immediately Invoked
Function Expression - to capture ~i~ at each iteration:

#+begin_src js
for (var i = 0; i < 10; i++) {
    // capture the current state of 'i'
    // by invoking a function with its current value
    (function(i) {
        setTimeout(function() { console.log(i); }, 100 * i);
    })(i);
}
#+end_src

The ~i~ in the parameter list actually shadows the ~i~ declared in the
for loop, and which is used to invoke the function.  The function
closes over the value of the parameter ~i~ when it is invoked, and
will be available to the ~setTimeout~ function when it runs much
later.

** Let
#+cindex:lexical scope
#+cindex:block scope
#+cindex:local variable
The =let= statement declares a block scope local variable, optionally
initializing it to a value.  The other difference between =var= and
=let= is that the latter is initialized to value only when parser
evaluates it.  The =let= does not create properties of the window
object when declared globally.  The main difference between =var= and
=let= is that the scope of a =var= variable is the entire enclosing
function.

#+begin_src js
var x = 'global';
let y = 'global';
console.log(this.x); // "global"
console.log(this.y); // undefined
#+end_src

When a variable is declared using ~let~, it uses what some call
lexical-scoping or block-scoping.  Unlike variables declared with
~var~, whose scopes leak out to their containing function,
block-scoped variables are not visible outside of their nearest
containing block or =for-loop=.

#+cindex:temporal dead zone
Another property of block-scoped variables is that they can’t be read
or written to before they’re actually declared.  While these variables
are “present” throughout their scope, all points up until their
declaration are part of their temporal dead zone.  This is just a
sophisticated way of saying you can’t access them before the ~let~
statement, and luckily TypeScript will let you know that.

You can still capture a block-scoped variable before it’s declared.
The only catch is that it’s illegal to call that function before the
declaration.  If targeting ES2015, a modern runtime will throw an
error; however, right now TypeScript is permissive and won’t report
this as an error.

#+begin_src js
function foo() {
    // okay to capture 'a'
    return a;
}

// illegal call 'foo' before 'a' is declared
// runtimes should throw an error here
foo();

let a;
#+end_src

*** Emulate Private Members
#+cindex:private member
In dealing with constructors it is possible to use the ~let~ bindings
to share one or more private members without using closures:

#+caption:Emulate private members using let
#+name:emulate-private-members-using-let
#+begin_src js -n
var Thing;

{ // BLOCK SCOPE
  let privateScope = new WeakMap(); // PRIVATE MEMBERS
  let counter = 0;

  Thing = function() {
    this.someProperty = 'foo';

    privateScope.set(this, {
      hidden: ++counter,
    });
  };

  Thing.prototype.showPublic = function() {
    return this.someProperty;
  };

  Thing.prototype.showPrivate = function() {
    return privateScope.get(this).hidden;
  };
}

console.log(typeof privateScope); // "undefined"

var thing = new Thing();

console.log(thing); // Thing {someProperty: "foo"}

thing.showPublic(); // "foo"

thing.showPrivate(); // 1
#+end_src

The same privacy pattern with closures over local variables can be
created with ~var~, but those need a function scope (typically an IIFE
in the module pattern) instead of just a block scope like in the
example above.

*** Temporal Dead Zone
Unlike variables declared with ~var~, which will start with the value
undefined, ~let~ variables are not initialized until their definition
is evaluated.  Accessing the variable before the initialization
results in a =ReferenceError=.  The variable is in a "temporal dead
zone" from the start of the block until the initialization is
processed.

Unlike with simply undeclared variables and variables that hold a
value of =undefined=, using the ~typeof~ operator to check for the
type of a variable in that variable's TDZ will throw a
=ReferenceError=:

** Const
~const~ declarations are another way of declaring variables.  They are
like ~let~ declarations but, as their name implies, their value cannot
be changed once they are bound.  In other words, they have the same
scoping rules as ~let~, but you can’t re-assign to them.  This should
not be confused with the idea that the values they refer to are
immutable.  Unless you take specific measures to avoid it, the
internal state of a ~const~ variable is still modifiable.
Fortunately, TypeScript allows you to specify that members of an
object are =readonly=

{{{heading(Principle of Least Privilege)}}}

#+cindex:least privilege
Applying the principle of /least privilege/, all declarations other
than those you plan to modify should use ~const~.  The rationale is
that if a variable didn’t need to get written to, others working on
the same codebase shouldn’t automatically be able to write to the
object, and will need to consider whether they really need to reassign
to the variable.  Using ~const~ also makes code more predictable when
reasoning about flow of data.
** Destructuring
*** Array Destructuring
#+cindex:destructuring
#+cindex:array destructuring
The simplest form of destructuring is array destructuring assignment:

#+begin_src js
let input = [1, 2];
let [first, second] = input; // first := 1, second := 2
#+end_src

This creates two new variables named first and second.  This is
equivalent to using indexing, but is much more convenient:

#+begin_src js
first = input[0];
second = input[1];
#+end_src

Destructuring works with already-declared variables as well:

#+begin_src js
// swap variables
[first, second] = [second, first];
#+end_src

And with parameters to a function:

#+begin_src js
function f([first, second]: [number, number]) {
    console.log(first);
    console.log(second);
}
f([1, 2]);
#+end_src

You can create a variable for the remaining items in a list using the
syntax ...:

#+begin_src js
let [first, ...rest] = [1, 2, 3, 4];
console.log(first); // outputs 1
console.log(rest); // outputs [ 2, 3, 4 ]
#+end_src

Of course, since this is JavaScript, you can just ignore trailing
elements you don’t care about:

#+begin_src js
let [first] = [1, 2, 3, 4];
console.log(first); // outputs 1
#+end_src

Or other elements:

#+begin_src js
let [, second, , fourth] = [1, 2, 3, 4];
console.log(second); // outputs 2
console.log(fourth); // outputs 4
#+end_src

*** Tuple Destructuring
#+cindex:destructuring
#+cindex:tuple destructuring
Tuples may be destructured like arrays; the destructuring variables
get the types of the corresponding tuple elements:

#+begin_src js
let tuple: [number, string, boolean] = [7, "hello", true];

let [a, b, c] = tuple; // a: number, b: string, c: boolean
#+end_src

It’s an error to destructure a tuple beyond the range of its elements.
As with arrays, you can destructure the rest of the tuple with ..., to
get a shorter tuple; and ignore trailing elements, or other elements.

*** Object Destructuring
#+cindex:destructuing
#+cindex:object destructuring
You can also destructure objects:

#+begin_src js
let o = {
    a: "foo",
    b: 12,
    c: "bar"
};
Let { a, b } = o;
#+end_src

This creates new variables ~a~ and ~b~ from ~o.a~ and ~o.b~.  Notice
that you can skip ~c~ if you don’t need it.

Like array destructuring, you can have assignment without declaration:

#+begin_src js
({ a, b } = { a: "baz", b: 101 });
#+end_src

Notice that we had to surround this statement with
parentheses. JavaScript normally parses a ={= as the start of block.

You can create a variable for the remaining items in an object using
the syntax ...:

#+begin_src js
let { a, ...passthrough } = o;
let total = passthrough.b + passthrough.c.length;
#+end_src

{{{heading(Property Renaming)}}}

#+pindex:property renaming
You can also give different names to properties:

#+begin_src js
let { a: newName1, b: newName2 } = o;
#+end_src

You can read ~a: newName1~ as “a as newName1”.  The direction is
left-to-right, as if you had written:

#+begin_src js
let newName1 = o.a;
let newName2 = o.b;
#+end_src

Confusingly, the colon here does not indicate the type.  The type, if
you specify it, still needs to be written after the entire
destructuring:

#+begin_src js
let { a, b }: { a: string, b: number } = o;
#+end_src

{{{heading(Default Values)}}}

#+cindex:default values
Default values let you specify a default value in case a property is
=undefined=:

#+begin_src js
function keepWholeObject(wholeObject: { a: string, b?: number }) {
    let { a, b = 1001 } = wholeObject;
}
#+end_src

In this example the ~b?~ indicates that ~b~ is optional, so it may be
=undefined=.  ~keepWholeObject~ now has a variable for ~wholeObject as
well as the properties ~a~ and ~b~, even if ~b~ is =undefined=.

*** Function Declarations and Destructuring
#+cindex:destructuring
#+cindex:function declarations and destructuring
Destructuring also works in function declarations. For simple cases
this is straightforward:

#+begin_src js
type C = { a: string, b?: number }
function f({ a, b }: C): void {
    // ...
}
#+end_src

But specifying defaults is more common for parameters, and getting
defaults right with destructuring can be tricky.  First of all, you
need to remember to put the pattern before the default value.

#+begin_src js
function f({ a="", b=0 } = {}): void {
    // ...
}
f();
#+end_src

Then, you need to remember to give a default for optional properties
on the destructured property instead of the main initializer.  Remember
that ~C~ was defined with ~b~ optional:

#+begin_src js
function f({ a, b=0 } = { a: "" }): void {
    // ...
}
f({ a: "yes" }); // ok, default b = 0
f(); // ok, default to { a: "" }, which then defaults b = 0
f({}); // error, 'a' is required if you supply an argument
#+end_src

Use destructuring with care.  As the previous example demonstrates,
anything but the simplest destructuring expression is confusing.  This
is especially true with deeply nested destructuring, which gets really
hard to understand even without piling on renaming, default values,
and type annotations.  Try to keep destructuring expressions small and
simple.  You can always write the assignments that destructuring would
generate yourself.
** Spreading
#+cindex:@code{spread} operator
#+cindex:spreading
The =spread= operator is the opposite of destructuring.  It allows you
to spread an array into another array, or an object into another
object.  For example:

#+begin_src js
let first = [1, 2];
let second = [3, 4];
let bothPlus = [0, ...first, ...second, 5];
#+end_src

#+cindex:shallow copy, @code{spread} operator
This gives ~bothPlus~ the value =[0, 1, 2, 3, 4, 5]=.  Spreading
creates a shallow copy of first and second.  They are not changed by
the spread.

You can also spread objects:

#+begin_src js
let defaults = { food: "spicy", price: "$$", ambiance: "noisy" };
let search = { ...defaults, food: "rich" };
#+end_src

Now search is ={ food: "rich", price: "$$", ambiance: "noisy" }=.
Object spreading is more complex than array spreading.  Like array
spreading, it proceeds from left-to-right, but the result is still an
object.  This means that properties that come later in the spread
object overwrite properties that come earlier.  So if we modify the
previous example to spread at the end:

#+begin_src js
let defaults = { food: "spicy", price: "$$", ambiance: "noisy" };
let search = { food: "rich", ...defaults };
#+end_src

Then the =food= property in defaults overwrites =food: "rich"=, which
is not what we want in this case.

Object spread also has a couple of other surprising limits.  First, it
only includes an objects’ own, enumerable properties.  Basically, that
means you lose methods when you spread instances of an object:

#+begin_src js
class C {
  p = 12;
  m() {
  }
}
let c = new C();
let clone = { ...c };
clone.p; // ok
clone.m(); // error!
#+end_src

Second, the Typescript compiler doesn’t allow spreads of type
parameters from generic functions.  That feature is expected in future
versions of the language.
* Interfaces
#+cindex:interfaces, introduction
#+cindex:duck typing
#+cindex:structural subtyping
One of TypeScript’s core principles is that type checking focuses on
the shape that values have.  This is sometimes called “duck typing” or
“structural subtyping”.  In TypeScript, interfaces fill the role of
naming these types, and are a powerful way of defining contracts
within your code as well as contracts with code outside of your
project.

{{{heading(A Simple Interface)}}}

#+begin_src js
function printLabel(labeledObj: { label: string }) {
    console.log(labeledObj.label);
}

let myObj = {size: 10, label: "Size 10 Object"};
printLabel(myObj);
#+end_src

The type checker checks the call to ~printLabel~.  The ~printLabel~
function has a single parameter that requires that the object passed
in has a property called =label= of type =string=.  Notice that our
object actually has more properties than this, but the compiler only
checks that at least the ones required are present and match the types
required.

We can write the same example again, this time using an interface to
describe the requirement of having the =label= property that is a
=string=:

#+begin_src js
interface LabeledValue {
    label: string;
}

function printLabel(labeledObj: LabeledValue) {
    console.log(labeledObj.label);
}

let myObj = {size: 10, label: "Size 10 Object"};
printLabel(myObj);
#+end_src

The interface =LabeledValue= is a name we can now use to describe the
requirement in the previous example.  It still represents having a
single property called =label= that is of type =string=.  Notice we
didn’t have to explicitly say that the object we pass to ~printLabel~
implements this interface like we might have to in other languages.
Here, it’s only the shape that matters.  If the object we pass to the
function meets the requirements listed, then it’s allowed.

It’s worth pointing out that the type checker does not require that
these properties come in any sort of order, only that the properties
the interface requires are present and have the required type.

** Optional Properties
#+cindex:interface, optional property
#+cindex:option bag
Not all properties of an interface may be required.  Some exist under
certain conditions or may not be there at all.  These optional
properties are popular when creating patterns like “option bags” where
you pass an object to a function that only has a couple of properties
filled in.

Here’s an example of this pattern:

#+caption:Example of an Interface with optional Properties
#+name:interface-with-optional-properties
#+begin_src js
interface SquareConfig {
    color?: string;
    width?: number;
}

function createSquare(config: SquareConfig): {color: string; area: number} {
    let newSquare = {color: "white", area: 100};
    if (config.color) {
        newSquare.color = config.color;
    }
    if (config.width) {
        newSquare.area = config.width * config.width;
    }
    return newSquare;
}

let mySquare = createSquare({color: "black"});
#+end_src

Interfaces with optional properties are written similar to other
interfaces, with each optional property denoted by a =?= at the end of
the property name in the declaration.

The advantage of optional properties is that you can describe these
possibly available properties while still also preventing use of
properties that are not part of the interface.  For example, had we
mistyped the name of the color property in ~createSquare~, we would get
an error message letting us know:

#+begin_src js
interface SquareConfig {
    color?: string;
    width?: number;
}

function createSquare(config: SquareConfig): { color: string; area: number } {
    let newSquare = {color: "white", area: 100};
    if (config.clor) {
        // Error: Property 'clor' does not exist on type 'SquareConfig'
        newSquare.color = config.clor;
    }
    if (config.width) {
        newSquare.area = config.width * config.width;
    }
    return newSquare;
}

let mySquare = createSquare({color: "black"});
#+end_src

** Read-Only Properties
Some properties should only be modifiable when an object is first
created.  You can specify this by putting =readonly= before the name
of the property:

#+begin_src js
interface Point {
    readonly x: number;
    readonly y: number;
}
#+end_src

You can construct a Point by assigning an object literal. After the
assignment, x and y can’t be changed.

#+begin_src js
let p1: Point = { x: 10, y: 20 };
p1.x = 5; // error!
#+end_src

TypeScript comes with a =ReadonlyArray<T>= type that is the same as
=Array<T>= with all mutating methods removed, so you can make sure you
don’t change your arrays after creation:

#+begin_src js
let a: number[] = [1, 2, 3, 4];
let ro: ReadonlyArray<number> = a;
ro[0] = 12; // error!
ro.push(5); // error!
ro.length = 100; // error!
a = ro; // error!
#+end_src

On the last line of the snippet you can see that even assigning the
entire =ReadonlyArray= back to a normal array is illegal.  You can
still override it with a type assertion, though:

#+begin_src js
a = ro as number[];
#+end_src

The easiest way to remember whether to use =readonly= or =const= is to
ask whether you’re using it on a variable or a property.  Variables
use =const= whereas properties use =readonly=.
** Excess Property Checks
In our first example using interfaces, TypeScript lets us pass ={
size: number; label: string; }= to something that only expected a ={
label: string; }=.  We also just learned about optional properties,
and how they’re useful when describing so-called “option bags”.

However, combining the two naively would allow an error to sneak
in.  For example, taking our last example using ~createSquare~:

#+begin_src js
interface SquareConfig {
    color?: string;
    width?: number;
}

function createSquare(config: SquareConfig): { color: string; area: number } {
    // ...
}

let mySquare = createSquare({ colour: "red", width: 100 });
#+end_src

Notice the given argument to ~createSquare~ is spelled =colour= instead of
=color=.  In plain JavaScript, this sort of thing fails silently.

You could argue that this program is correctly typed, since the
=width= properties are compatible, there’s no =color= property
present, and the extra =colour= property is insignificant.

However, TypeScript takes the stance that there’s probably a bug in
this code.  Object literals get special treatment and undergo /excess
property checking/ when assigning them to other variables, or passing
them as arguments.  If an object literal has any properties that the
“target type” doesn’t have, you’ll get an error:

#+begin_src js
// error: Object literal may only specify known properties, but
// 'colour' does not exist in type 'SquareConfig'. Did you mean to
// write 'color'?
let mySquare = createSquare({ colour: "red", width: 100 });
#+end_src

#+cindex:type assertion
Getting around these checks is actually really simple.  The easiest
method is to just use a /type assertion/:

#+begin_src js
let mySquare = createSquare({ width: 100, opacity: 0.5 } as SquareConfig);
#+end_src

However, a better approach might be to add a /string index signature/
if you’re sure that the object can have some extra properties that are
used in some special way.  If =SquareConfig= can have =color= and
=width= properties with the above types, but could also have any
number of other properties, then we could define it like so:

#+begin_src js
interface SquareConfig {
    color?: string;
    width?: number;
    [propName: string]: any;
}
#+end_src

Here we’re saying a =SquareConfig= can have any number of properties,
and as long as they aren’t =color= or =width=, their types don’t
matter.

One final way to get around these checks, which might be a bit
surprising, is to assign the object to another variable: Since
~squareOptions~ won’t undergo excess property checks, the compiler
won’t give you an error.

#+begin_src js
let squareOptions = { colour: "red", width: 100 };
let mySquare = createSquare(squareOptions);
#+end_src

The above workaround will work as long as you have a common property
between ~squareOptions~ and =SquareConfig=.  In this example, it was
the property =width=.  It will however, fail if the variable does not
have any common object property.  For example:

#+begin_src js
let squareOptions = { colour: "red" };
let mySquare = createSquare(squareOptions);
#+end_src

Keep in mind that for simple code like above, you probably shouldn’t
be trying to “get around” these checks.  For more complex object
literals that have methods and hold state, you might need to keep
these techniques in mind, but a majority of excess property errors are
actually bugs.  That means if you’re running into excess property
checking problems for something like option bags, you might need to
revise some of your type declarations.  In this instance, if it’s okay
to pass an object with both a =color= or =colour= property to
~createSquare~, you should fix up the definition of =SquareConfig= to
reflect that.
** Function Types
#+cindex:interfaces and function types
#+cindex:funtion types, and interfaces
Interfaces are capable of describing the wide range of shapes that
JavaScript objects can take.  In addition to describing an object with
properties, interfaces are also capable of describing function types.

#+cindex:call signature
To describe a function type with an interface, we give the interface a
/call signature/.  This is like a function declaration with only the
parameter list and return type given.  Each parameter in the parameter
list requires both name and type.

#+begin_src js
interface SearchFunc {
    (source: string, subString: string): boolean;
}
#+end_src

Once defined, we can use this function type interface like we would
other interfaces.  Here, we show how you can create a variable of a
function type and assign it a function value of the same type.

#+begin_src js
let mySearch: SearchFunc;
mySearch = function(source: string, subString: string) {
    let result = source.search(subString);
    return result > -1;
}
#+end_src

For function types to correctly type check, the names of the
parameters do not need to match.  We could have, for example, written
the above example like this:

#+begin_src js
let mySearch: SearchFunc;
mySearch = function(src: string, sub: string): boolean {
    let result = src.search(sub);
    return result > -1;
}
#+end_src

#+cindex:contextual typing
#+cindex:inference, type
#+cindex:type inference
Function parameters are checked one at a time, with the type in each
corresponding parameter position checked against each other.  If you
do not want to specify types at all, TypeScript’s /contextual typing/
can /infer/ the argument types since the function value is assigned
directly to a variable of type =SearchFunc=.  Here, also, the return
type of our function expression is implied by the values it returns
(here =false= and =true=).  Had the function expression returned
=numbers= or =strings=, the type checker would have warned us that
return type doesn’t match the return type described in the
=SearchFunc= interface.

#+begin_src js
let mySearch: SearchFunc;
mySearch = function(src, sub) {
    let result = src.search(sub);
    return result > -1;
}
#+end_src

** Indexable Types
#+cindex:indexable types
#+cindex:types, indexable
#+cindex:interface for indexable type
#+cindex:index signature
Similarly to how we can use interfaces to describe function types, we
can also describe types that we can “index into” like ~a[10]~, or
~ageMap["daniel"]~.  Indexable types have an index signature that
describes the types we can use to index into the object, along with
the corresponding return types when indexing.  Let’s take an example:

#+begin_src js
interface StringArray {
    [index: number]: string;
}

let myArray: StringArray;
myArray = ["Bob", "Fred"];

let myStr: string = myArray[0];
#+end_src

Above, we have a =StringArray= interface that has an index signature.
This index signature states that when a =StringArray= is indexed with
a =number=, it will return a =string=.

There are two types of supported index signatures: =string= and
=number=.  It is possible to support both types of indexers, /but the
type returned from a numeric indexer must be a subtype of the type
returned from the string indexer/.  This is because when indexing with
a =number=, JavaScript will actually convert that to a =string= before
indexing into an object.  That means that indexing with =100= (a
=number=) is the same thing as indexing with "100" (a =string=), so
the two need to be consistent.

#+begin_src js
class Animal {
    name: string;
}
class Dog extends Animal {
    breed: string;
}

// Error: indexing with a numeric string might get you a completely separate type of Animal!
interface NotOkay {
    [x: number]: Animal;
    [x: string]: Dog;
}
#+end_src

While string index signatures are a powerful way to describe the
“dictionary” pattern, /they also enforce that all properties match
their return type/.  This is because a string index declares that
=obj.property= is also available as =obj["property"]=.  In the
following example, =name= ’s type does not match the string index’s
type, and the type checker gives an error:

#+begin_src js
interface NumberDictionary {
    [index: string]: number;
    length: number;    // ok, length is a number
    name: string;      // error, the type of 'name' is not a subtype of the indexer
}
#+end_src

#+cindex:union
However, properties of different types are acceptable if the index
signature is a union of the property types:

#+begin_src js
interface NumberOrStringDictionary {
    [index: string]: number | string;
    length: number;    // ok, length is a number
    name: string;      // ok, name is a string
#+end_src

Finally, you can make index signatures =readonly= in order to prevent
assignment to their indices:

#+begin_src js
interface ReadonlyStringArray {
    readonly [index: number]: string;
}
let myArray: ReadonlyStringArray = ["Alice", "Bob"];
myArray[2] = "Mallory"; // error!
#+end_src

You can’t set ~myArray[2]~ because the index signature is =readonly=.

** Class Types
#+cindex:class types
#+cindex:interface, class
One of the most common uses of interfaces in languages like C# and
Java, that of explicitly enforcing that a class meets a particular
contract, is also possible in TypeScript.

#+begin_src js
interface ClockInterface {
    currentTime: Date;
}

class Clock implements ClockInterface {
    currentTime: Date = new Date();
    constructor(h: number, m: number) { }
}
#+end_src

You can also describe methods in an interface that are implemented in
the class, as we do with ~setTime~ in the below example:

#+begin_src js
interface ClockInterface {
    currentTime: Date;
    setTime(d: Date): void;
}

class Clock implements ClockInterface {
    currentTime: Date = new Date();
    setTime(d: Date) {
        this.currentTime = d;
    }
    constructor(h: number, m: number) { }
}
#+end_src

#+cindex:public interface
#+cindex:private interface
Interfaces describe the public side of the class, rather than both the
public and private side.  This prohibits you from using them to check
that a class also has particular types for the private side of the
class instance.

*** Static vs Instance
#+cindex:static side
#+cindex:instance side
#+cindex:construct signature
When working with classes and interfaces, it helps to keep in mind
that a class has two types: the type of the static side and the type
of the instance side.  You may notice that if you create an interface
with a construct signature and try to create a class that implements
this interface you get an error:

#+begin_src js
interface ClockConstructor {
    new (hour: number, minute: number);
}

class Clock implements ClockConstructor {
    currentTime: Date;
    constructor(h: number, m: number) { }
}
#+end_src

This is because when a class implements an interface, only the
instance side of the class is checked.  Since the constructor sits in
the static side, it is not included in this check.

#+cindex:constructor function
Instead, you would need to work with the static side of the class
directly.  In this example, we define two interfaces,
=ClockConstructor= for the constructor and =ClockInterface= for the
instance methods.  Then, for convenience, we define a constructor
function ~createClock~ that creates instances of the type that is
passed to it:

#+caption:Interface for Constructor Function
#+name:interface-for-constructor-function
#+begin_src js -n
interface ClockConstructor {
    new (hour: number, minute: number): ClockInterface;
}
interface ClockInterface {
    tick(): void;
}

function createClock(ctor: ClockConstructor, hour: number, minute: number): ClockInterface {
    return new ctor(hour, minute);
}

class DigitalClock implements ClockInterface {
    constructor(h: number, m: number) { }
    tick() {
        console.log("beep beep");
    }
}
class AnalogClock implements ClockInterface {
    constructor(h: number, m: number) { }
    tick() {
        console.log("tick tock");
    }
}

let digital = createClock(DigitalClock, 12, 17);
let analog = createClock(AnalogClock, 7, 32);
#+end_src

Because ~createClock~ ’s first parameter is of type
=ClockConstructor=, in ~createClock(AnalogClock, 7, 32)~, it checks
that =AnalogClock= has the correct constructor signature.

#+cindex:class expression
Another simple way is to use class expressions:

#+begin_src js
interface ClockConstructor {
  new (hour: number, minute: number);
}

interface ClockInterface {
  tick();
}

const Clock: ClockConstructor = class Clock implements ClockInterface {
  constructor(h: number, m: number) {}
  tick() {
      console.log("beep beep");
  }
}
#+end_src

** Extending Interfaces
#+cindex:interface, extend
Like classes, interfaces can extend each other.  This allows you to
copy the members of one interface into another, which gives you more
flexibility in how you separate your interfaces into reusable
components.

#+begin_src js
interface Shape {
    color: string;
}

interface Square extends Shape {
    sideLength: number;
}

let square = {} as Square;
square.color = "blue";
square.sideLength = 10;
#+end_src

An interface can extend multiple interfaces, creating a combination of
all of the interfaces.

#+begin_src js
interface Shape {
    color: string;
}

interface PenStroke {
    penWidth: number;
}

interface Square extends Shape, PenStroke {
    sideLength: number;
}

let square = {} as Square;
square.color = "blue";
square.sideLength = 10;
square.penWidth = 5.0;
#+end_src

** Hybrid Types
Interfaces can describe the rich types present in real world
JavaScript.  Because of JavaScript’s dynamic and flexible nature, you
may occasionally encounter an object that works as a combination of
some of the types described above.

One such example is an object that acts as both a function and an
object, with additional properties:

#+begin_src js
interface Counter {
    (start: number): string;
    interval: number;
    reset(): void;
}

function getCounter(): Counter {
    let counter = (function (start: number) { }) as Counter;
    counter.interval = 123;
    counter.reset = function () { };
    return counter;
}

let c = getCounter();
c(10);
c.reset();
c.interval = 5.0;
#+end_src

When interacting with 3rd-party JavaScript, you may need to use
patterns like the above to fully describe the shape of the type.

** Interfaces Extending Classes
When an interface type extends a class type it inherits the members of
the class but not their implementations.  It is as if the interface
had declared all of the members of the class without providing an
implementation.  Interfaces inherit even the private and protected
members of a base class.  This means that when you create an interface
that extends a class with private or protected members, that interface
type can only be implemented by that class or a subclass of it.

This is useful when you have a large inheritance hierarchy, but want
to specify that your code works with only subclasses that have certain
properties. The subclasses don’t have to be related besides inheriting
from the base class. For example:

#+begin_src js
class Control {
    private state: any;
}

interface SelectableControl extends Control {
    select(): void;
}

class Button extends Control implements SelectableControl {
    select() { }
}

class TextBox extends Control {
    select() { }
}

// Error: Property 'state' is missing in type 'Image'.
class Image implements SelectableControl {
    private state: any;
    select() { }
}

class Location {

}
#+end_src

In the above example, =SelectableControl= contains all of the members
of =Control=, including the =private= =state= property.  Since =state=
is a private member it is only possible for descendants of =Control=
to implement =SelectableControl=.  This is because only descendants of
=Control= will have a =state= =private= member that originates in the
same declaration, which is a requirement for private members to be
compatible.

Within the =Control= class it is possible to access the =state=
=private= member through an instance of =SelectableControl=.
Effectively, a =SelectableControl= acts like a =Control= that is known
to have a select method.  The =Button= and =TextBox= classes are
subtypes of =SelectableControl= (because they both inherit from
=Control= and have a =select= method), but the =Image= and =Location=
classes are not.
* Classes
#+cindex:ECMAScript 2015
#+cindex:class-based construction
Starting with ECMAScript 2015, also known as ECMAScript 6, JavaScript
programmers will be able to build their applications using this
object-oriented class-based approach.  In TypeScript, we allow
developers to use these techniques now, and compile them down to
JavaScript that works across all major browsers and platforms, without
having to wait for the next version of JavaScript.

Let’s take a look at a simple class-based example:

#+begin_src js
class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return "Hello, " + this.greeting;
    }
}

let greeter = new Greeter("world");
#+end_src

We declare a new class =Greeter=.  This class has three members: a
property called =greeting=, a constructor, and a method =greet=.

#+cindex:@code{this}
You’ll notice that in the class when we refer to one of the members of
the class we prepend =this=.  This denotes that it’s a member access.

In the last line we construct an instance of the =Greeter= class using
~new~.  This calls into the constructor we defined earlier, creating a
new object with the =Greeter= shape, and running the constructor to
initialize it.

** Inheritance
#+cindex:inheritance
#+cindex:extend
#+cindex:class-based programming
In TypeScript, we can use common object-oriented patterns.  One of the
most fundamental patterns in class-based programming is being able to
extend existing classes to create new ones using inheritance.

Let’s take a look at an example:

#+begin_src js
class Animal {
    move(distanceInMeters: number = 0) {
        console.log(`Animal moved ${distanceInMeters}m.`);
    }
}

class Dog extends Animal {
    bark() {
        console.log('Woof! Woof!');
    }
}

const dog = new Dog();
dog.bark();
dog.move(10);
dog.bark();
#+end_src

#+cindex:derived class
#+cindex:base class
#+cindex:@code{extends} keyword
#+cindex:subclass
#+cindex:superclass
This example shows the most basic inheritance feature: classes inherit
properties and methods from base classes.  Here, =Dog= is a derived
class that derives from the =Animal= base class using the ~extends~
keyword.  Derived classes are often called subclasses, and base classes
are often called superclasses.

Because =Dog= extends the functionality from =Animal=, we were able to
create an instance of =Dog= that could both ~bark()~ and ~move()~.

Let’s now look at a more complex example.

#+begin_src js
class Animal {
    name: string;
    constructor(theName: string) { this.name = theName; }
    move(distanceInMeters: number = 0) {
        console.log(`${this.name} moved ${distanceInMeters}m.`);
    }
}

class Snake extends Animal {
    constructor(name: string) { super(name); }
    move(distanceInMeters = 5) {
        console.log("Slithering...");
        super.move(distanceInMeters);
    }
}

class Horse extends Animal {
    constructor(name: string) { super(name); }
    move(distanceInMeters = 45) {
        console.log("Galloping...");
        super.move(distanceInMeters);
    }
}

let sam = new Snake("Sammy the Python");
let tom: Animal = new Horse("Tommy the Palomino");

sam.move();
tom.move(34);
#+end_src

This example covers a few other features we didn’t previously
mention.  Again, we see the ~extends~ keywords used to create two new
subclasses of =Animal=: =Horse= and =Snake=.

#+cindex:@code{super()}
#+cindex:constructor function
One difference from the prior example is that each derived class that
contains a constructor function must call ~super()~ which will execute
the constructor of the base class.  What’s more, before we ever access
a property on ~this~ in a constructor body, we have to call ~super()~.
This is an important rule that TypeScript will enforce.

#+cindex:override methods
The example also shows how to override methods in the base class with
methods that are specialized for the subclass.  Here both =Snake= and
=Horse= create a ~move~ method that overrides the ~move~ from
=Animal=, giving it functionality specific to each class.  Note that
even though ~tom~ is declared as an =Animal=, since its value is a
=Horse=, calling ~tom.move(34)~ will call the overriding method in
=Horse=:

#+begin_example
Slithering...
Sammy the Python moved 5m.
Galloping...
Tommy the Palomino moved 34m.
#+end_example

** Public Private Protected Modifiers
{{{heading(Public by Default)}}}

In our examples, we’ve been able to freely access the members that we
declared throughout our programs.  If you’re familiar with classes in
other languages, you may have noticed in the above examples we haven’t
had to use the word =public= to accomplish this; for instance, C#
requires that each member be explicitly labeled =public= to be
visible.  In TypeScript, each member is =public= by default.

You may still mark a member =public= explicitly.  We could have
written the =Animal= class from the previous section in the following
way:

#+begin_src js
class Animal {
    public name: string;
    public constructor(theName: string) { this.name = theName; }
    public move(distanceInMeters: number) {
        console.log(`${this.name} moved ${distanceInMeters}m.`);
    }
}
#+end_src

{{{heading(Understanding Private)}}}

When a member is marked private, it cannot be accessed from outside of
its containing class.  For example:

#+begin_src js
class Animal {
    private name: string;
    constructor(theName: string) { this.name = theName; }
}

new Animal("Cat").name; // Error: 'name' is private;
#+end_src

#+cindex:structural type system
#+cindex:type system, structural
TypeScript is a /structural type system/.  When we compare two
different types, regardless of where they came from, if the types of
all members are compatible, then we say the types themselves are
compatible.

However, when comparing types that have =private= and =protected=
members, we treat these types differently.  For two types to be
considered compatible, if one of them has a =private= member, then the
other must have a =private= member that originated in the same
declaration.  The same applies to =protected= members.

Let’s look at an example to better see how this plays out in practice:

#+begin_src js
class Animal {
    private name: string;
    constructor(theName: string) { this.name = theName; }
}

class Rhino extends Animal {
    constructor() { super("Rhino"); }
}

class Employee {
    private name: string;
    constructor(theName: string) { this.name = theName; }
}

let animal = new Animal("Goat");
let rhino = new Rhino();
let employee = new Employee("Bob");

animal = rhino;
animal = employee; // Error: 'Animal' and 'Employee' are not compatible
#+end_src

In this example, we have an =Animal= and a =Rhino=, with =Rhino= being
a subclass of =Animal=.  We also have a new class =Employee= that
looks identical to =Animal= in terms of shape.  We create some
instances of these classes and then try to assign them to each other
to see what will happen.  Because =Animal= and =Rhino= share the
private side of their shape from the same declaration of =private=
=name=: =string= in =Animal=, they are compatible. n However, this is
not the case for =Employee.  When we try to assign from an =Employee=
to =Animal= we get an error that these types are not compatible.  Even
though =Employee= also has a =private= member called =name=, it’s not
the one we declared in =Animal=.

{{{heading(Understanding Protected)}}}

The =protected= modifier acts much like the =private= modifier with
the exception that members declared =protected= can also be accessed
within deriving classes.  For example,

#+begin_src js
class Person {
    protected name: string;
    constructor(name: string) { this.name = name; }
}

class Employee extends Person {
    private department: string;

    constructor(name: string, department: string) {
        super(name);
        this.department = department;
    }

    public getElevatorPitch() {
        return `Hello, my name is ${this.name} and I work in ${this.department}.`;
    }
}

let howard = new Employee("Howard", "Sales");
console.log(howard.getElevatorPitch());
console.log(howard.name); // error
#+end_src

Notice that while we can’t use =name= from outside of =Person=, we can
still use it from within an instance method of =Employee= because
=Employee= derives from =Person=.

A constructor may also be marked protected. This means that the class
cannot be instantiated outside of its containing class, but can be
extended. For example,

#+begin_src js
class Person {
    protected name: string;
    protected constructor(theName: string) { this.name = theName; }
}

// Employee can extend Person
class Employee extends Person {
    private department: string;

    constructor(name: string, department: string) {
        super(name);
        this.department = department;
    }

    public getElevatorPitch() {
        return `Hello, my name is ${this.name} and I work in ${this.department}.`;
    }
}

let howard = new Employee("Howard", "Sales");
let john = new Person("John"); // Error: The 'Person' constructor is protected
#+end_src

** Readonly Modifier

#+cindex:@code{readonly} keyword
#+cindex:property, @code{readonly}
You can make properties =readonly= by using the =readonly= keyword.
=Readonly= properties must be initialized at their declaration or in
the constructor.

#+begin_src js
class Octopus {
    readonly name: string;
    readonly numberOfLegs: number = 8;
    constructor (theName: string) {
        this.name = theName;
    }
}
let dad = new Octopus("Man with the 8 strong legs");
dad.name = "Man with the 3-piece suit"; // error! name is readonly.
#+end_src

{{{heading(Parameter Properties)}}}

#+cindex:parameter property
In our last example, we had to declare a =readonly= member =name= and
a constructor parameter =theName= in the =Octopus= class.  This is
needed in order to have the value of =theName= accessible after the
=Octopus= constructor is executed.  Parameter properties let you create
and initialize a member in one place.  Here’s a further revision of the
previous =Octopus= class using a parameter property:

#+begin_src js
class Octopus {
    readonly numberOfLegs: number = 8;
    constructor(readonly name: string) {
    }
}
#+end_src

Notice how we dropped =theName= altogether and just use the shortened
=readonly= =name: string= parameter on the constructor to create and
initialize the =name= member.  We’ve consolidated the declarations and
assignment into one location.

Parameter properties are declared by prefixing a constructor parameter
with an accessibility modifier or =readonly=, or both.  Using
=private= for a parameter property declares and initializes a
=private= member; likewise, the same is done for =public=,
=protected=, and =readonly=.

** Accessors
#+cindex:accessor
TypeScript supports =getters/setters= as a way of intercepting
accesses to a member of an object.  This gives you a way of having
finer-grained control over how a member is accessed on each object.

#+cindex:getter
#+cindex:setter
Let’s convert a simple class to use =get= and =set=.  First, let’s
start with an example without getters and setters.

#+begin_src js
class Employee {
    fullName: string;
}

let employee = new Employee();
employee.fullName = "Bob Smith";
if (employee.fullName) {
    console.log(employee.fullName);
}
#+end_src

While allowing people to randomly set =fullName= directly is pretty
handy, we may also want enforce some constraints when =fullName= is
set.

In this version, we add a =setter= that checks the length of the
=newName= to make sure it’s compatible with the =max-length= of our
backing database field.  If it isn’t we throw an error notifying
client code that something went wrong.

To preserve existing functionality, we also add a simple =getter= that
retrieves =fullName= unmodified.

#+begin_src js
const fullNameMaxLength = 10;

class Employee {
    private _fullName: string;

    get fullName(): string {
        return this._fullName;
    }

    set fullName(newName: string) {
        if (newName && newName.length > fullNameMaxLength) {
            throw new Error("fullName has a max length of " + fullNameMaxLength);
        }

        this._fullName = newName;
    }
}

let employee = new Employee();
employee.fullName = "Bob Smith";
if (employee.fullName) {
    console.log(employee.fullName);
}
#+end_src

To prove to ourselves that our accessor is now checking the length of
values, we can attempt to assign a name longer than 10 characters and
verify that we get an error.

#+cindex:accessors
A couple of things to note about accessors:

#+cindex:ECMAScript 5
- First, accessors require you to set the compiler to output
  ECMAScript 5 or higher.  Downleveling to ECMAScript 3 is not
  supported.

  #+cindex:get
  #+cindex:set
- Second, accessors with a =get= and no =set= are automatically
  inferred to be =readonly=.  This is helpful when generating a
  ~.d.ts~ file from your code, because users of your property can see
  that they can’t change it.

** Static Properties
#+cindex:static properties
We can also create static members of a class, those that are visible
on the class itself rather than on the instances.  In this example, we
use =static= on the origin, as it’s a general value for all grids.
Each instance accesses this value through prepending the name of the
class.  Similarly to prepending ~this~ in front of instance accesses,
here we prepend =Grid.= in front of static accesses.

#+begin_src js
class Grid {
    static origin = {x: 0, y: 0};
    calculateDistanceFromOrigin(point: {x: number; y: number;}) {
        let xDist = (point.x - Grid.origin.x);
        let yDist = (point.y - Grid.origin.y);
        return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;
    }
    constructor (public scale: number) { }
}

let grid1 = new Grid(1.0);  // 1x scale
let grid2 = new Grid(5.0);  // 5x scale

console.log(grid1.calculateDistanceFromOrigin({x: 10, y: 10}));
console.log(grid2.calculateDistanceFromOrigin({x: 10, y: 10}));
#+end_src

** Abstract Classes
#+cindex:abstract class
#+cindex:@code{abstract} keyword
Abstract classes are base classes from which other classes may be
derived.  They may not be instantiated directly.  Unlike an interface,
an abstract class may contain implementation details for its members.
The =abstract= keyword is used to define abstract classes as well as
abstract methods within an abstract class.

#+begin_src js
abstract class Animal {
    abstract makeSound(): void;
    move(): void {
        console.log("roaming the earth...");
    }
}
#+end_src

#+cindex:abstract method
#+cindex:@code{abstract} keyword
Methods within an abstract class that are marked as abstract do not
contain an implementation and must be implemented in derived classes.
Abstract methods share a similar syntax to interface methods.  Both
define the signature of a method without including a method body.
However, abstract methods must include the =abstract= keyword and may
optionally include access modifiers.

#+begin_src js -n
abstract class Department {

    constructor(public name: string) {
    }

    printName(): void {
        console.log("Department name: " + this.name);
    }

    abstract printMeeting(): void; // must be implemented in derived classes
}

class AccountingDepartment extends Department {

    constructor() {
        super("Accounting and Auditing"); // constructors in derived classes must call super()
    }

    printMeeting(): void {
        console.log("The Accounting Department meets each Monday at 10am.");
    }

    generateReports(): void {
        console.log("Generating accounting reports...");
    }
}

let department: Department; // ok to create a reference to an abstract type
department = new Department(); // error: cannot create an instance of an abstract class
department = new AccountingDepartment(); // ok to create and assign a non-abstract subclass
department.printName();
department.printMeeting();
department.generateReports(); // error: method doesn't exist on declared abstract type
#+end_src

** Advanced Techniques
*** Constructor Functions
When you declare a class in TypeScript, you are actually creating
multiple declarations at the same time.

{{{heading(Class Type)}}}

The first is the type of the instance of the class.

#+begin_src js
class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return "Hello, " + this.greeting;
    }
}

let greeter: Greeter;
greeter = new Greeter("world");
console.log(greeter.greet());
#+end_src

Here, when we say ~let greeter: Greeter~, we’re using =Greeter= as the
type of instances of the class =Greeter=.  This is almost second
nature to programmers from other object-oriented languages.

{{{heading(Constructor Function)}}}

#+cindex:constructor function, class type
We’re also creating another value that we call the /constructor
function/.  This is the function that is called when we ~new~ up
instances of the class.  To see what this looks like in practice,
let’s take a look at the JavaScript created by the above example:

#+begin_src js
let Greeter = (function () {
    function Greeter(message) {
        this.greeting = message;
    }
    Greeter.prototype.greet = function () {
        return "Hello, " + this.greeting;
    };
    return Greeter;
})();

let greeter;
greeter = new Greeter("world");
console.log(greeter.greet());
#+end_src

Here, ~let Greeter~ is going to be assigned the constructor function.
When we call ~new~ and run this function, we get an instance of the
class.  The constructor function also contains all of the static
members of the class.  Another way to think of each class is that
there is an instance side and a static side.

Let’s modify the example a bit to show this difference:

#+begin_src js
class Greeter {
    static standardGreeting = "Hello, there";
    greeting: string;
    greet() {
        if (this.greeting) {
            return "Hello, " + this.greeting;
        }
        else {
            return Greeter.standardGreeting;
        }
    }
}

let greeter1: Greeter;
greeter1 = new Greeter();
console.log(greeter1.greet());

let greeterMaker: typeof Greeter = Greeter;
greeterMaker.standardGreeting = "Hey there!";

let greeter2: Greeter = new greeterMaker();
console.log(greeter2.greet());
#+end_src

In this example, ~greeter1~ works similarly to before.  We instantiate
the =Greeter class, and use this object.  This we have seen before.

Next, we then use the class directly. Here we create a new variable
called ~greeterMaker~.  This variable will hold the class itself, or
said another way its constructor function.  Here we use ~typeof~
Greeter, that is “give me the type of the Greeter class itself” rather
than the instance type.  Or, more precisely, “give me the type of the
symbol called Greeter,” which is the type of the constructor function.
This type will contain all of the static members of Greeter along with
the constructor that creates instances of the Greeter class.  We show
this by using ~new~ on ~greeterMaker~, creating new instances of
=Greeter= and invoking them as before.
*** Using a Class as an Interface
A class declaration creates two things: a type representing instances
of the class and a constructor function.  Because classes create
types, you can use them in the same places you would be able to use
interfaces.

#+begin_src js
class Point {
    x: number;
    y: number;
}

interface Point3d extends Point {
    z: number;
}

let point3d: Point3d = {x: 1, y: 2, z: 3};
#+end_src
* Functions
#+cindex:functions
In TypeScript, while there are classes, namespaces, and modules,
functions still play the key role in describing how to do things.
TypeScript also adds some new capabilities to the standard JavaScript
functions to make them easier to work with.

#+cindex:function, named
#+cindex:function, anonymous
#+cindex:anonymous function
To begin, just as in JavaScript, TypeScript functions can be created
both as a named function or as an anonymous function.  This allows you
to choose the most appropriate approach for your application, whether
you’re building a list of functions in an API or a one-off function to
hand off to another function.

To quickly recap what these two approaches look like in JavaScript:

#+begin_src js
// Named function
function add(x, y) {
    return x + y;
}

// Anonymous function
let myAdd = function(x, y) { return x + y; };
#+end_src

#+cindex:capture variables
Just as in JavaScript, functions can refer to variables outside of the
function body.  When they do so, they’re said to capture these
variables.  Having a firm understanding how this mechanic works is an
important piece of working with JavaScript and TypeScript.

#+begin_src js
let z = 100;

function addToZ(x, y) {
    return x + y + z;
}
#+end_src

** Function Types
#+cindex:function type
{{{heading(Typing the Function)}}}

Let’s add types to our simple examples from earlier:

#+begin_src js
function add(x: number, y: number): number {
    return x + y;
}

let myAdd = function(x: number, y: number): number { return x + y; };
#+end_src

We can add types to each of the parameters and then to the function
itself to add a return type.  TypeScript can figure the return type
out by looking at the return statements, so we can also optionally
leave this off in many cases.

{{{heading(Writing the Function Type)}}}

Let’s write the full type of the function out by looking at each piece
of the function type.

#+begin_src js
let myAdd: (x: number, y: number) => number =
    function(x: number, y: number): number { return x + y; };
#+end_src

A function’s type has the same two parts: the type of the arguments
and the return type.  When writing out the whole function type, both
parts are required.

{{{subheading(Parameter Types)}}}

We write out the parameter types just like a parameter list, giving
each parameter a name and a type.  This name is just to help with
readability.  We could have instead written:

#+begin_src js
let myAdd: (baseValue: number, increment: number) => number =
    function(x: number, y: number): number { return x + y; };
#+end_src

As long as the parameter types line up, it’s considered a valid type
for the function, regardless of the names you give the parameters in
the function type.

{{{subheading(Return Type)}}}

The second part is the return type.  We make it clear which is the
return type by using a fat arrow (~=>~) between the parameters and the
return type.  As mentioned before, this is a required part of the
function type, so if the function doesn’t return a value, you would
use =void= instead of leaving it off.

#+cindex:captured variables
#+cindex:hidden state
Of note, only the parameters and the return type make up the function
type.  Captured variables are not reflected in the type.  In effect,
captured variables are part of the “hidden state” of any function and
do not make up its API.

{{{heading(Inferring the Types)}}}

In playing with the example, you may notice that the TypeScript
compiler can figure out the type even if you only have types on one
side of the equation:

#+begin_src js
// myAdd has the full function type
let myAdd = function(x: number, y: number): number { return  x + y; };

// The parameters 'x' and 'y' have the type number
let myAdd: (baseValue: number, increment: number) => number =
    function(x, y) { return x + y; };
#+end_src

#+cindex:contextual typing
#+cindex:type inference
This is called “contextual typing”, a form of type inference.  This
helps cut down on the amount of effort to keep your program typed.

** Optional and Default Parameters
In TypeScript, every parameter is assumed to be required by the
function.  This doesn’t mean that it can’t be given null or undefined,
but rather, when the function is called, the compiler will check that
the user has provided a value for each parameter.  The compiler also
assumes that these parameters are the only parameters that will be
passed to the function.  In short, the number of arguments given to a
function has to match the number of parameters the function expects.

#+begin_src js
function buildName(firstName: string, lastName: string) {
    return firstName + " " + lastName;
}

let result1 = buildName("Bob");                  // error, too few parameters
let result2 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters
let result3 = buildName("Bob", "Adams");         // ah, just right
#+end_src

In JavaScript, every parameter is optional, and users may leave them
off as they see fit.  When they do, their value is =undefined=.  We
can get this functionality in TypeScript by adding a =?= to the end of
parameters we want to be optional.  For example, let’s say we want the
last name parameter from above to be optional:

#+begin_src js
function buildName(firstName: string, lastName?: string) {
    if (lastName)
        return firstName + " " + lastName;
    else
        return firstName;
}

let result1 = buildName("Bob");                  // works correctly now
let result2 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters
let result3 = buildName("Bob", "Adams");         // ah, just right
#+end_src

Any optional parameters must follow required parameters.  Had we
wanted to make the first name optional, rather than the last name, we
would need to change the order of parameters in the function, putting
the first name last in the list.

#+cindex:default-initialized parameter
In TypeScript, we can also set a value that a parameter will be
assigned if the user does not provide one, or if the user passes
undefined in its place.  These are called default-initialized
parameters.  Let’s take the previous example and default the last name
to "Smith".

#+begin_src js
function buildName(firstName: string, lastName = "Smith") {
    return firstName + " " + lastName;
}

let result1 = buildName("Bob");                  // works correctly now, returns "Bob Smith"
let result2 = buildName("Bob", undefined);       // still works, also returns "Bob Smith"
let result3 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters
let result4 = buildName("Bob", "Adams");         // ah, just right
#+end_src

Default-initialized parameters that come after all required parameters
are treated as optional, and just like optional parameters, can be
omitted when calling their respective function. This means optional
parameters and trailing default parameters will share commonality in
their types, so both:

#+begin_src js
function buildName(firstName: string, lastName?: string) {
    // ...
}
#+end_src

and

#+begin_src js
function buildName(firstName: string, lastName = "Smith") {
    // ...
}
#+end_src

{{{noindent}}}share the same type =(firstName: string, lastName?:
string) => string=.  The default value of =lastName= disappears in the
type, only leaving behind the fact that the parameter is optional.

Unlike plain optional parameters, default-initialized parameters don’t
need to occur after required parameters.  If a default-initialized
parameter comes before a required parameter, users need to explicitly
pass =undefined= to get the default initialized value.  For example,
we could write our last example with only a default initializer on
=firstName=:

#+begin_src js
function buildName(firstName = "Will", lastName: string) {
    return firstName + " " + lastName;
}

let result1 = buildName("Bob");                  // error, too few parameters
let result2 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters
let result3 = buildName("Bob", "Adams");         // okay and returns "Bob Adams"
let result4 = buildName(undefined, "Adams");     // okay and returns "Will Adams"
#+end_src

** Rest Parameters
#+cindex:rest parameters
Required, optional, and default parameters all have one thing in
common: they talk about one parameter at a time.  Sometimes, you want
to work with multiple parameters as a group, or you may not know how
many parameters a function will ultimately take.  In JavaScript, you
can work with the arguments directly using the ~arguments~ variable
that is visible inside every function body.

In TypeScript, you can gather these arguments together into a
variable:

#+begin_src js
function buildName(firstName: string, ...restOfName: string[]) {
    return firstName + " " + restOfName.join(" ");
}

// employeeName will be "Joseph Samuel Lucas MacKinzie"
let employeeName = buildName("Joseph", "Samuel", "Lucas", "MacKinzie");
#+end_src

Rest parameters are treated as a boundless number of optional
parameters.  When passing arguments for a rest parameter, you can use
as many as you want; you can even pass none.  The compiler will build
an array of the arguments passed in with the name given after the
ellipsis (=...=), allowing you to use it in your function.

The ellipsis is also used in the type of the function with rest
parameters:

#+begin_src js
function buildName(firstName: string, ...restOfName: string[]) {
    return firstName + " " + restOfName.join(" ");
}

let buildNameFun: (fname: string, ...rest: string[]) => string = buildName;
#+end_src

** this in Function Declarations
TypeScript lets you catch incorrect uses of this with a couple of
techniques.

{{{this and Arrow Functions)}}}

In JavaScript, ~this~ is a variable that’s set when a function is
called.  This makes it a very powerful and flexible feature, but it
comes at the cost of always having to know about the context that a
function is executing in.  This is notoriously confusing, especially
when returning a function or passing a function as an argument.

Let’s look at an example:

#+begin_src js
let deck = {
    suits: ["hearts", "spades", "clubs", "diamonds"],
    cards: Array(52),
    createCardPicker: function() {
        return function() {
            let pickedCard = Math.floor(Math.random() * 52);
            let pickedSuit = Math.floor(pickedCard / 13);

            return {suit: this.suits[pickedSuit], card: pickedCard % 13};
        }
    }
}

let cardPicker = deck.createCardPicker();
let pickedCard = cardPicker();

alert("card: " + pickedCard.card + " of " + pickedCard.suit);
#+end_src

Notice that ~createCardPicker~ is a function that itself returns a
function.  If we tried to run the example, we would get an error
instead of the expected alert box.  This is because the ~this~ being
used in the function created by ~createCardPicker~ will be set to
=window= instead of our =deck= object.  That’s because we call
~cardPicker()~ on its own.  A top-level non-method syntax call like
this will use =window= for this.  (Note: under strict mode, this will
be =undefined= rather than window).

We can fix this by making sure the function is bound to the correct
~this~ before we return the function to be used later.  This way,
regardless of how it’s later used, it will still be able to see the
original =deck= object.  To do this, we change the function expression
to use the ECMAScript 6 arrow syntax.  Arrow functions capture the
~this~ where the function is created rather than where it is invoked:

#+begin_src js
let deck = {
    suits: ["hearts", "spades", "clubs", "diamonds"],
    cards: Array(52),
    createCardPicker: function() {
        // NOTE: the line below is now an arrow function, allowing us to capture 'this' right here
        return () => {
            let pickedCard = Math.floor(Math.random() * 52);
            let pickedSuit = Math.floor(pickedCard / 13);

            return {suit: this.suits[pickedSuit], card: pickedCard % 13};
        }
    }
}

let cardPicker = deck.createCardPicker();
let pickedCard = cardPicker();

alert("card: " + pickedCard.card + " of " + pickedCard.suit);
#+end_src

Even better, TypeScript will warn you when you make this mistake if
you pass the {{{option(--noImplicitThis)}}} flag to the compiler.  It
will point out that this in ~this.suits[pickedSuit]~ is of type =any=.

{{{heading(this Parameters)}}}

Unfortunately, the type of ~this.suits[pickedSuit]~ is still =any=.
That’s because ~this~ comes from the function expression inside the
object literal.  To fix this, you can provide an explicit ~this~
parameter.  ~this~ parameters are fake parameters that come first in
the parameter list of a function:

#+begin_src js
function f(this: void) {
    // make sure `this` is unusable in this standalone function
}
#+end_src

Let’s add a couple of interfaces to our example above, =Card= and
=Deck=, to make the types clearer and easier to reuse:

#+begin_src js
interface Card {
    suit: string;
    card: number;
}
interface Deck {
    suits: string[];
    cards: number[];
    createCardPicker(this: Deck): () => Card;
}
let deck: Deck = {
    suits: ["hearts", "spades", "clubs", "diamonds"],
    cards: Array(52),
    // NOTE: The function now explicitly specifies that its callee must be of type Deck
    createCardPicker: function(this: Deck) {
        return () => {
            let pickedCard = Math.floor(Math.random() * 52);
            let pickedSuit = Math.floor(pickedCard / 13);

            return {suit: this.suits[pickedSuit], card: pickedCard % 13};
        }
    }
}

let cardPicker = deck.createCardPicker();
let pickedCard = cardPicker();

alert("card: " + pickedCard.card + " of " + pickedCard.suit);
#+end_src

Now TypeScript knows that ~createCardPicker~ expects to be called on a
=Deck= object.  That means that ~this~ is of type =Deck= now, not
=any=, so {{{option(--noImplicitThis)}}} will not cause any errors

{{{heading(this Parameters in Callbacks)}}}

You can also run into errors with ~this~ in callbacks, when you pass
functions to a library that will later call them.  Because the library
that calls your callback will call it like a normal function, this
will be =undefined=.  With some work you can use ~this~ parameters to
prevent errors with callbacks too.  First, the library author needs to
annotate the callback type with ~this~:

#+begin_src js
interface UIElement {
    addClickListener(onclick: (this: void, e: Event) => void): void;
}
#+end_src

~this: void~ means that ~addClickListener~ expects ~onclick~ to be a
function that does not require a ~this~ type.  Second, annotate your
calling code with ~this~:

#+begin_src js
class Handler {
    info: string;
    onClickBad(this: Handler, e: Event) {
        // oops, used `this` here. using this callback would crash at runtime
        this.info = e.message;
    }
}
let h = new Handler();
uiElement.addClickListener(h.onClickBad); // error!
#+end_src

With ~this~ annotated, you make it explicit that ~onClickBad~ must be
called on an instance of =Handler.  Then TypeScript will detect that
~addClickListener~ requires a function that has ~this: void~.  To fix
the error, change the type of ~this~:

#+begin_src js
class Handler {
    info: string;
    onClickGood(this: void, e: Event) {
        // can't use `this` here because it's of type void!
        console.log('clicked!');
    }
}
let h = new Handler();
uiElement.addClickListener(h.onClickGood);
#+end_src

Because ~onClickGood~ specifies its ~this~ type as =void=, it is legal
to pass to ~addClickListener~.  Of course, this also means that it
can’t use ~this.info~.  If you want both then you’ll have to use an
arrow function:

#+begin_src js
class Handler {
    info: string;
    onClickGood = (e: Event) => { this.info = e.message }
}
#+end_src

This works because arrow functions use the outer ~this~, so you can
always pass them to something that expects ~this: void~.  The downside
is that one arrow function is created per object of type =Handler=.
Methods, on the other hand, are only created once and attached to
=Handler= ’s prototype.  They are shared between all objects of type
=Handler=.

** Overloads
#+cindex:overload function method
JavaScript is inherently a very dynamic language.  It’s not uncommon
for a single JavaScript function to return different types of objects
based on the shape of the arguments passed in.

#+begin_src js
let suits = ["hearts", "spades", "clubs", "diamonds"];

function pickCard(x): any {
    // Check to see if we're working with an object/array
    // if so, they gave us the deck and we'll pick the card
    if (typeof x == "object") {
        let pickedCard = Math.floor(Math.random() * x.length);
        return pickedCard;
    }
    // Otherwise just let them pick the card
    else if (typeof x == "number") {
        let pickedSuit = Math.floor(x / 13);
        return { suit: suits[pickedSuit], card: x % 13 };
    }
}

let myDeck = [{ suit: "diamonds", card: 2 }, { suit: "spades", card: 10 }, { suit: "hearts", card: 4 }];
let pickedCard1 = myDeck[pickCard(myDeck)];
alert("card: " + pickedCard1.card + " of " + pickedCard1.suit);

let pickedCard2 = pickCard(15);
alert("card: " + pickedCard2.card + " of " + pickedCard2.suit);
#+end_src

Here, the ~pickCard~ function will return two different things based
on what the user has passed in.  If the users passes in an object that
represents the deck, the function will pick the card.  If the user
picks the card, we tell them which card they’ve picked.  But how do we
describe this to the type system?

#+cindex:overload list
The answer is to supply multiple function types for the same function
as a list of overloads.  This list is what the compiler will use to
resolve function calls.  Let’s create a list of overloads that
describe what our ~pickCard~ accepts and what it returns.

#+begin_src js
let suits = ["hearts", "spades", "clubs", "diamonds"];

function pickCard(x: {suit: string; card: number; }[]): number;
function pickCard(x: number): {suit: string; card: number; };
function pickCard(x): any {
    // Check to see if we're working with an object/array
    // if so, they gave us the deck and we'll pick the card
    if (typeof x == "object") {
        let pickedCard = Math.floor(Math.random() * x.length);
        return pickedCard;
    }
    // Otherwise just let them pick the card
    else if (typeof x == "number") {
        let pickedSuit = Math.floor(x / 13);
        return { suit: suits[pickedSuit], card: x % 13 };
    }
}

let myDeck = [{ suit: "diamonds", card: 2 }, { suit: "spades", card: 10 }, { suit: "hearts", card: 4 }];
let pickedCard1 = myDeck[pickCard(myDeck)];
alert("card: " + pickedCard1.card + " of " + pickedCard1.suit);

let pickedCard2 = pickCard(15);
alert("card: " + pickedCard2.card + " of " + pickedCard2.suit);
#+end_src

With this change, the overloads now give us type checked calls to the
~pickCard~ function.

In order for the compiler to pick the correct type check, it follows a
similar process to the underlying JavaScript.  It looks at the
overload list and, proceeding with the first overload, attempts to
call the function with the provided parameters.  If it finds a match,
it picks this overload as the correct overload.  For this reason, it’s
customary to order overloads from most specific to least specific.

Note that the function ~pickCard(x): any~ piece is not part of the
overload list, so it only has two overloads: one that takes an object
and one that takes a number.  Calling ~pickCard~ with any other
parameter types would cause an error.
* Generics
* Enums
#+cindex:enum type
Enums allow us to define a set of named constants.  Using enums can
make it easier to document intent, or create a set of distinct cases.
TypeScript provides both numeric and string-based enums.

{{{heading(Numeric Enums)}}}

#+cindex:@code{enum} keyword
#+cindex:numeric enum
We’ll first start off with numeric enums, which are probably more
familiar if you’re coming from other languages.  An enum can be
defined using the =enum= keyword.

#+begin_src js
enum Direction {
    Up = 1,
    Down,
    Left,
    Right,
}
#+end_src

#+cindex:enum initializer
Above, we have a numeric enum where =Up= is initialized with 1.  All
of the following members are auto-incremented from that point on.  In
other words, =Direction.Up= has the value 1, =Down= has 2, =Left= has
3, and =Right= has 4.

If we wanted, we could leave off the initializers entirely:

#+begin_src js
enum Direction {
    Up,
    Down,
    Left,
    Right,
}
#+end_src

#+cindex:auto-incrementing initializer
Here, =Up= would have the value 0, =Down= would have 1, etc.  This
auto-incrementing behavior is useful for cases where we might not care
about the member values themselves, but do care that each value is
distinct from other values in the same enum.

Using an enum is simple: just access any member as a property off of
the enum itself, and declare types using the name of the enum:

#+begin_src js
enum Response {
    No = 0,
    Yes = 1,
}

function respond(recipient: string, message: Response): void {
    // ...
}

respond("Princess Caroline", Response.Yes)
#+end_src

Numeric enums can be mixed in computed and constant members (see
below).  The short story is, enums without initializers either need to
be first, or have to come after numeric enums initialized with numeric
constants or other constant enum members.  In other words, the
following isn’t allowed:

#+begin_src js
enum E {
    A = getSomeValue(),
    B, // Error! Enum member must have initializer.
}
#+end_src

{{{heading(String Enums)}}}

#+cindex:string enum
#+cindex:constant-initialized
String enums are a similar concept, but have some subtle runtime
differences as documented below.  In a string enum, each member has to
be constant-initialized with a string literal, or with another string
enum member.

#+begin_src js
enum Direction {
    Up = "UP",
    Down = "DOWN",
    Left = "LEFT",
    Right = "RIGHT",
}
#+end_src

#+cindex:serialize, string enum
While string enums don’t have auto-incrementing behavior, string enums
have the benefit that they “serialize” well.  In other words, if you
were debugging and had to read the runtime value of a numeric enum,
the value is often opaque---it doesn’t convey any useful meaning on
its own (though reverse mapping can often help), string enums allow
you to give a meaningful and readable value when your code runs,
independent of the name of the enum member itself.

{{{heading(Heterogenous Enums)}}}

Technically enums can be mixed with string and numeric members, but
it’s not clear why you would ever want to do so:

#+begin_src js
enum BooleanLikeHeterogeneousEnum {
    No = 0,
    Yes = "YES",
}
#+end_src

Unless you’re really trying to take advantage of JavaScript’s runtime
behavior in a clever way, it’s advised that you don’t do this.

{{{heading(Computed and Constant Members)}}}

#+cindex:constant enum
#+cindex:computed enum
Each enum member has a value associated with it which can be either
constant or computed.  An enum member is considered constant if:

- It is the first member in the enum and it has no initializer, in
  which case it’s assigned the value 0:

  #+begin_src js
  // E.X is constant:
  enum E { X }
  #+end_src

- It does not have an initializer and the preceding enum member was a
  numeric constant.  In this case the value of the current enum member
  will be the value of the preceding enum member plus one.

  #+begin_src js
  // All enum members in 'E1' and 'E2' are constant.

  enum E1 { X, Y, Z }

  enum E2 {
      A = 1, B, C
  }
  #+end_src

- The enum member is initialized with a constant enum expression.  A
  constant enum expression is a subset of TypeScript expressions that
  can be fully evaluated at compile time.  An expression is a constant
  enum expression if it is:

  1. a literal enum expression (basically a string literal or a
     numeric literal)

  2. a reference to previously defined constant enum member (which can
     originate from a different enum)

  3. a parenthesized constant enum expression

  4. one of the +, -, ~ unary operators applied to constant enum
     expression

  5. +, -, *, /, %, <<, >>, >>>, &, |, ^ binary operators with
     constant enum expressions as operands

  It is a compile time error for constant enum expressions to be
  evaluated to =NaN= or =Infinity=.


#+cindex:computed enum
In all other cases enum member is considered computed.

#+begin_src js
enum FileAccess {
    // constant members
    None,
    Read    = 1 << 1,
    Write   = 1 << 2,
    ReadWrite  = Read | Write,
    // computed member
    G = "123".length
}
#+end_src

{{{heading(Using Enums and Enum Member Types)}}}

#+cindex:literal enum
There is a special subset of constant enum members that aren’t
calculated: literal enum members.  A literal enum member is a constant
enum member with no initialized value, or with values that are
initialized to:

- any string literal (e.g. "foo", "bar, "baz")

- any numeric literal (e.g. 1, 100)

- a unary minus applied to any numeric literal (e.g. -1, -100)


When all members in an enum have literal enum values, some special
semantics come to play.

The first is that enum members also become types as well!  For
example, we can say that certain members can only have the value of an
enum member:

#+begin_src js
enum ShapeKind {
    Circle,
    Square,
}

interface Circle {
    kind: ShapeKind.Circle;
    radius: number;
}

interface Square {
    kind: ShapeKind.Square;
    sideLength: number;
}

let c: Circle = {
    kind: ShapeKind.Square, // Error! Type 'ShapeKind.Square' is not assignable to type 'ShapeKind.Circle'.
    radius: 100,
}
#+end_src

#+cindex:union type
The other change is that enum types themselves effectively become a
union of each enum member.  While we haven’t discussed union types
yet, all that you need to know is that with union enums, the type
system is able to leverage the fact that it knows the exact set of
values that exist in the enum itself.  Because of that, TypeScript can
catch silly bugs where we might be comparing values incorrectly.  For
example:

#+begin_src js
enum E {
    Foo,
    Bar,
}

function f(x: E) {
    if (x !== E.Foo || x !== E.Bar) {
        //             ~~~~~~~~~~~
        // Error! This condition will always return 'true' since the types 'E.Foo' and 'E.Bar' have no overlap.
    }
}
#+end_src

In that example, we first checked whether ~x~ was not ~E.Foo~.  If
that check succeeds, then our =||= will short-circuit, and the body of
the ‘if’ will run.  However, if the check didn’t succeed, then ~x~ can
only be ~E.Foo~, so it doesn’t make sense to see whether it’s equal to
~E.Bar~.

{{{heading(Enums at Runtime)}}}

Enums are real objects that exist at runtime.  For example, the
following enum

#+begin_src js
enum E {
    X, Y, Z
}
#+end_src

{{{noindent}}}an actually be passed around to functions.

#+begin_src js
function f(obj: { X: number }) {
    return obj.X;
}

// Works, since 'E' has a property named 'X' which is a number.
f(E);
#+end_src

{{{heading(Enums at Compile Time)}}}

#+cindex:@code{keyof} keyword
#+cindex:@code{keyof typeof}
Even though Enums are real objects that exist at runtime, the ~keyof~
keyword works differently than you might expect for typical objects.
Instead, use ~keyof typeof~ to get a Type that represents all Enum
keys as strings.

#+begin_src js
enum LogLevel {
    ERROR, WARN, INFO, DEBUG
}

/**
 * This is equivalent to:
 * type LogLevelStrings = 'ERROR' | 'WARN' | 'INFO' | 'DEBUG';
 */
type LogLevelStrings = keyof typeof LogLevel;

function printImportant(key: LogLevelStrings, message: string) {
    const num = LogLevel[key];
    if (num <= LogLevel.WARN) {
       console.log('Log level key is: ', key);
       console.log('Log level value is: ', num);
       console.log('Log level message is: ', message);
    }
}
printImportant('ERROR', 'This is a message');
#+end_src

{{{heading(Reverse Mappings)}}}

#+cindex:reverse mapping
In addition to creating an object with property names for members,
numeric enums members also get a reverse mapping from enum values to
enum names.  For example, in this example:

#+begin_src js
enum Enum {
    A
}
let a = Enum.A;
let nameOfA = Enum[a]; // "A"
#+end_src

TypeScript might compile this down to something like the the following
JavaScript:

#+begin_src js
var Enum;
(function (Enum) {
    Enum[Enum["A"] = 0] = "A";
})(Enum || (Enum = {}));
var a = Enum.A;
var nameOfA = Enum[a]; // "A"
#+end_src

In this generated code, an enum is compiled into an object that stores
both forward (name -> value) and reverse (value -> name) mappings.
References to other enum members are always emitted as property
accesses and never inlined.

Keep in mind that string enum members do not get a reverse mapping
generated at all.

{{{heading(Const Enums)}}}

In most cases, enums are a perfectly valid solution.  However
sometimes requirements are tighter.  To avoid paying the cost of extra
generated code and additional indirection when accessing enum values,
it’s possible to use =const= enums.  Const enums are defined using the
=const= modifier on our enums:

#+begin_src js
const enum Enum {
    A = 1,
    B = A * 2
}
#+end_src

Const enums can only use constant enum expressions and unlike regular
enums they are completely removed during compilation.  Const enum
members are inlined at use sites.  This is possible since =const=
enums cannot have computed members.

#+begin_src js
const enum Directions {
    Up,
    Down,
    Left,
    Right
}

let directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right]
#+end_src

{{{noindent}}}in generated code will become:

#+begin_src js
var directions = [0 /* Up */, 1 /* Down */, 2 /* Left */, 3 /* Right */];
#+end_src

{{{heading(Ambient Enums)}}}

#+cindex:ambient enum
Ambient enums are used to describe the shape of already existing enum
types.

#+begin_src js
declare enum Enum {
    A = 1,
    B,
    C = 2
}
#+end_src

One important difference between ambient and non-ambient enums is
that, in regular enums, members that don’t have an initializer will be
considered constant if its preceding enum member is considered
constant. In contrast, an ambient (and non-const) enum member that
does not have initializer is always considered computed.
* Type Inference
#+cindex:type inference
In this section, we will cover type inference in TypeScript.  Namely,
we’ll discuss where and how types are inferred.

** Basics
In TypeScript, there are several places where type inference is used
to provide type information when there is no explicit type annotation.
For example, in this code:

#+begin_src js
let x = 3;
#+end_src

The type of the ~x~ variable is inferred to be =number=.  This kind of
inference takes place when initializing variables and members, setting
parameter default values, and determining function return types.

In most cases, type inference is straightforward.  In the following
sections, we’ll explore some of the nuances in how types are inferred.

** Best Common Type
#+cindex:best common type
When a type inference is made from several expressions, the types of
those expressions are used to calculate a “best common type”.  For
example,

#+begin_src js
let x = [0, 1, null];
#+end_src

To infer the type of ~x~ in the example above, we must consider the
type of each array element.  Here we are given two choices for the
type of the array: =number= and =null=.  The best common type
algorithm considers each candidate type, and picks the type that is
compatible with all the other candidates.

Because the best common type has to be chosen from the provided
candidate types, there are some cases where types share a common
structure, but no one type is the super type of all candidate
types.  For example:

#+begin_src js
let zoo = [new Rhino(), new Elephant(), new Snake()];
#+end_src

Ideally, we may want ~zoo~ to be inferred as an =Animal[]=, but
because there is no object that is strictly of type =Animal= in the
array, we make no inference about the array element type.  To correct
this, instead explicitly provide the type when no one type is a super
type of all other candidates:

#+begin_src js
let zoo: Animal[] = [new Rhino(), new Elephant(), new Snake()];
#+end_src

#+cindex:union type
When no best common type is found, the resulting inference is the
union array type, =(Rhino | Elephant | Snake)[]=.

** Contextual Typing
#+cindex:contextual typing
Type inference also works in “the other direction” in some cases in
TypeScript.  This is known as “contextual typing”.  Contextual typing
occurs when the type of an expression is implied by its location.  For
example:

#+begin_src js
window.onmousedown = function(mouseEvent) {
    console.log(mouseEvent.button);   //<- OK
    console.log(mouseEvent.kangaroo); //<- Error!
};
#+end_src

Here, the Typescript type checker used the type of the
~Window.onmousedown~ function to infer the type of the function
expression on the right hand side of the assignment.  When it did so,
it was able to infer the type of the =mouseEvent= parameter, which
does contain a =button= property, but not a =kangaroo= property.

Typescript is smart enough to infer the type of things in other
contexts as well:

#+begin_src js
window.onscroll = function(uiEvent) {
    console.log(uiEvent.button); //<- Error!
}
#+end_src

#+cindex:contextually typed position
If this function were not in a contextually typed position, the
function’s argument would implicitly have type =any=, and no error
would be issued (unless you are using the
{{{option(--noImplicitAny)}}} option):

#+begin_src js
const handler = function(uiEvent) {
    console.log(uiEvent.button); //<- OK
}
#+end_src

We can also explicitly give type information to the function’s
argument to override any contextual type:

#+begin_src js
window.onscroll = function(uiEvent: any) {
    console.log(uiEvent.button);  //<- Now, no error is given
};
#+end_src

However, this code will log =undefined=, since =uiEvent= has no
property called =button=.

Contextual typing applies in many cases.  Common cases include
arguments to function calls, right hand sides of assignments, type
assertions, members of object and array literals, and return
statements.  The contextual type also acts as a candidate type in best
common type.  For example:

#+begin_src js
function createZoo(): Animal[] {
    return [new Rhino(), new Elephant(), new Snake()];
}
#+end_src

In this example, best common type has a set of four candidates:
=Animal=, =Rhino=, =Elephant=, and =Snake=.  Of these, =Animal= can be
chosen by the best common type algorithm.
* Modules
In order to align with ECMAScript 2015’s terminology, (namely that
~module X {~ is equivalent to the now-preferred ~namespace X {~), in
TypeScript 1.5, the nomenclature has changed:

- “Internal modules” are now “namespaces”
- “External modules” are now simply “modules”


#+cindex:ECMAScript 2015
Starting with ECMAScript 2015, JavaScript has a concept of
modules.  TypeScript shares this concept.

{{{heading(Modules Have Their Own Scope)}}}

#+cindex:module scope
#+cindex:scope, module
Modules are executed within their own scope, not in the global scope;
this means that variables, functions, classes, etc. declared in a
module are not visible outside the module unless they are explicitly
exported using one of the export forms.  Conversely, to consume a
variable, function, class, interface, etc. exported from a different
module, it has to be imported using one of the import forms.

{{{heading(Modules are Declarative)}}}

Modules are declarative; the relationships between modules are
specified in terms of imports and exports at the file level.

{{{heading(Module Loaders)}}}

#+cindex:module loader
#+cindex:CommonJS module loader
#+cindex:RequireJS module loader
Modules import one another using a module loader.  At runtime the
module loader is responsible for locating and executing all
dependencies of a module before executing it.  Well-known module
loaders used in JavaScript are Node.js’s loader for CommonJS modules
and the RequireJS loader for AMD modules in Web applications.

{{{heading(What Makes a Module)}}}

#+cindex:module
#+cindex:script
In TypeScript, just as in ECMAScript 2015, any file containing a
top-level import or export is considered a module.  Conversely, a file
without any top-level import or export declarations is treated as a
script whose contents are available in the global scope (and therefore
to modules as well).

** Export Keyword
#+cindex:@code{export} keyword
Any declaration (such as a variable, function, class, type alias, or
interface) can be exported by adding the =export= keyword.  The
=export= keyword can also be used in a statement, in which the
exported object can be aliased.

#+begin_src js
export interface <Name> { ... }
export const <id> = <expression>;
export { <Name> as <alias> };
#+end_src

{{{heading(Re-Exports)}}}

#+cindex:re-export
Often modules extend other modules, and partially expose some of their
features.  A re-export does not import it locally, or introduce a local
variable.

#+begin_src js
<implementation>

export { <original-name> as <new-name> from "./<path>";
#+end_src

Optionally, a module can wrap one or more modules and combine all
their exports using export * from "module" syntax.

#+begin_src js
export * from "./StringValidator"; // exports 'StringValidator' interface
export * from "./ZipCodeValidator";  // exports 'ZipCodeValidator' and const 'numberRegexp' class
export * from "./ParseIntBasedZipCodeValidator"; //  exports the 'ParseIntBasedZipCodeValidator' class
                                                 // and re-exports 'RegExpBasedZipCodeValidator' as alias
                                                 // of the 'ZipCodeValidator' class from 'ZipCodeValidator.ts'
                                                 // module.
#+end_src

** Import Keyword
Importing an exported declaration is done through using one of the
import forms below:

{{{heading(Import a single export from a module)}}}

#+begin_src js
import { <object> } from "./<path>";
#+end_src

Imports can also be renamed:

#+begin_src js
import { <object> as <alias> } from "./<path>";
#+end_src

{{{heading(Import the entire module into a single variable, and use it
to access the module exports)}}}

#+begin_src js
import * as <name> from "./<path";
#+end_src

{{{heading(Import a module for side-effects only)}}}

Though not recommended practice, some modules set up some global state
that can be used by other modules. These modules may not have any
exports, or the consumer is not interested in any of their exports. To
import these modules, use:

#+begin_src js
import "./<path>";
#+end_src

** Default Exports
#+cindex:default exports
#+cindex:@code{default} keyword
Each module can optionally export a default export.  Default exports
are marked with the keyword =default=; and there can only be one
default export per module.  =default= exports are imported using a
different import form.

#+begin_src js
export default <object>;
#+end_src

#+begin_src js
import <object> from "<path>";
#+end_src

Classes and function declarations can be authored directly as default
exports.  Default export class and function declaration names are
optional.  =default= exports can also be just values.

#+begin_src js
export default class { ... }
#+end_src

or

#+begin_src js
export default function (<params>) { ... }
#+end_src

#+begin_src js
import <name> from "./<path>";
#+end_src

** export = and import =
#+cindex:@code{export =}
#+cindex:@code{import =}
#+cindex:CommonJS
#+cindex:AMD
Both CommonJS and AMD generally have the concept of an exports object
which contains all exports from a module.  They also support replacing
the =exports= object with a custom single object.  Default exports are
meant to act as a replacement for this behavior; however, the two are
incompatible.  TypeScript supports ~export =~ to model the traditional
CommonJS and AMD workflow.

The ~export =~ syntax specifies a single object that is exported from
the module.  This can be a class, interface, namespace, function, or
enum.  When exporting a module using ~export =~, TypeScript-specific
~import module = require("module")~ must be used to import the module.

#+begin_src js
...
export = <Object>
#+end_src

#+begin_src js
import <name> = require("./<path>");
#+end_src

* Declaration Files
#+cindex:declaration file
This guide is designed to teach you how to write a high-quality
TypeScript Declaration File.

In this guide, we’ll assume basic familiarity with the TypeScript
language.

{{{heading(Sections)}}}

The guide is broken down into the following sections.

{{{subheading(Library Structures)}}}

The Library Structures guide helps you understand common library
formats and how to write a correct declaration file for each format.
If you’re editing an existing file, you probably don’t need to read
this section.  Authors of new declaration files must read this section
to properly understand how the format of the library influences the
writing of the declaration file.

{{{subheading(By Example)}}}

Many times, we are faced with writing a declaration file when we only
have examples of the underlying library to guide us.  The By Example
section shows many common API patterns and how to write declarations
for each of them.  This guide is aimed at the TypeScript novice who
may not yet be familiar with every language construct in TypeScript.

{{{subheading(Do's and Don'ts)}}}

Many common mistakes in declaration files can be easily avoided.  The
Do’s and Don’ts section identifies common errors, describes how to
detect them, and how to fix them.  Everyone should read this section
to help themselves avoid common mistakes.

{{{subheading(Deep Dive)}}}

For seasoned authors interested in the underlying mechanics of how
declaration files work, the Deep Dive section explains many advanced
concepts in declaration writing, and shows how to leverage these
concepts to create cleaner and more intuitive declaration files.

{{{subheading(Templates)}}}

In Templates you’ll find a number of declaration files that serve as a
useful starting point when writing a new file.  Refer to the
documentation in Library Structures to figure out which template file
to use.

{{{subheading(Publish to npm)}}}

The Publishing section explains how to publish your declaration files
to an npm package, and shows how to manage your dependent packages.

{{{subheading(Find and Install Declaration Files)}}}

For JavaScript library users, the Consumption section offers a few
simple steps to locate and install corresponding declaration files.

* Supplementary Programs
:PROPERTIES:
:appendix: t
:END:

** Tide for Emacs
=Tide= --- TypeScript Interactive Development Environment for Emacs

- https://github.com/ananthakumaran/tide

*** Tide Installation
- Install ~node.js v0.12.0~ or greater.

- Make sure ~tsconfig.json~ or ~jsconfig.json~ is present in the root
  folder of the project.

- =Tide= is available in [[http://melpa.org/#/tide][melpa]].  You can install =tide= via
  ~package-install M-x package-install [ret] tide~

*** Tide Configuration

#+begin_src emacs-lisp -n
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+end_src

*** Tide Format Options

#+cindex:tide format options
#+cindex:format options, tide
Format options can be specified in multiple ways.

{{{heading(via elisp)}}}

#+findex:tide-format-options
#+name:tide-format-options
#+begin_src emacs-lisp
(setq tide-format-options 
      '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t
        :placeOpenBraceOnNewLineForFunctions nil))
#+end_src

{{{heading(via tsfmt.json)}}}

~tsfmt.json~ should be present in the root folder along with
~tsconfig.json~

#+pindex:@code{tsfmt.json}
#+name:tsfmt.json
#+begin_src js
{
  "indentSize": 4,
  "tabSize": 4,
  "insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
  "placeOpenBraceOnNewLineForFunctions": false,
  "placeOpenBraceOnNewLineForControlBlocks": false
}
#+end_src

** Makefile
:PROPERTIES:
:appendix: t
:END:
#+name:makefile
#+begin_src makefile -n :tangle makefile
SOURCE=TypeScript-Guide

info:	$(SOURCE).texi
	makeinfo $(SOURCE).texi

pdf:	$(SOURCE).texi
	pdftexi2dvi -q $(SOURCE).texi; \
	open $(SOURCE).pdf

clean-texi:
	-rm *.texi
clean-info:
	-rm *.info
clean-pdf:
	-rm *.pdf
clean-aux:
	-rm *.{aux,toc,log,cp,cps,pg,pgs,fn,fns}

clean: clean-texi clean-info clean-pdf clean-aux

phony:clean-texi clean-info clean-pdf clean-aux clean
#+end_src

* Concept Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:

* Program Index
:PROPERTIES:
:index:    pg
:unnumbered: t
:END:

* Function Index
:PROPERTIES:
:unnumbered: t
:index:    fn
:END:

* Copying
:PROPERTIES:
:copying:  t
:END:

Copyright {{{noindent}}}\copy 2019 {{{author}}} {{{theVersion}}}

* Macro Definitions                                                :noexport:

#+macro:theVersion Version {{{version}}} {{{date}}}
#+macro:noindent @@texinfo:@noindent @@
#+macro:heading @@texinfo:@heading@@ $1
#+macro:subheading @@texinfo:@subheading@@ $1
#+macro:command @@texinfo:@command{@@$1@@texinfo:}@@
#+macro:option @@texinfo:@option{@@$1@@texinfo:}@@

* Export Options                                                   :noexport:

** Texinfo Export Options

#+options: H:4
#+texinfo_filename:typescript-guide.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+subtitle:{{{theVersion}}}
#+subauthor:LOLH
#+texinfo_dir_category:Languages
#+texinfo_dir_title:TypeScript
#+texinfo_dir_desc:How to program using TypeScript
#+texinfo_printed_title:TypeScript Guide in Print

* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# End:
