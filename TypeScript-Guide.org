#+title:TypeScript Guide
#+author:Pinecone062
#+date:2019-08-16 08:28
#+macro:version 0.0.13

#+texinfo:@insertcopying

* Source Installation and Update
#+cindex:source
#+cindex:installation
#+cindex:updating

** About TypeScript
TypeScript is a superset of JavaScript that compiles to clean
JavaScript output.

- https://www.typescriptlang.org

** Source Code Repository
TypeScript is being developed on GitHub and is open source.

- https://github.com/Microsoft/TypeScript

** Installation

Installation is performed by Node:

#+name:installation
#+option: :results output :exports none
#+begin_src sh :shebang "#!/usr/bin/env bash"
yarn global add typescript
#+end_src

** Nightly Builds
- [[http://www.typescriptlang.org/docs/handbook/nightly-builds.html][Nightly Builds home]]
- The nightlies are available on [[https://www.myget.org/gallery/typescript-preview][www.myget.org]]

There are two packages:

- Microsoft.TypeScript.Compiler :: Tools only (~tsc.exe~, ~lib.d.ts~,
     etc.)

- Microsoft.TypeScript.MSBuild :: Tools as above, as well as MSBuild
     tasks and targets (Microsoft.TypeScript.targets,
     Microsoft.TypeScript.Default.props, etc.)


{{{heading(Using npm)}}}

A nightly build from the TypeScript’s master branch is published by
midnight PST to NPM and NuGet.  Here is how you can get it and use it
with your tools:

: npm install -g typescript@next

* Configuration and Compilation

** The ~tsconfig~ File
#+cindex:schema, @file{tsconfig.json}
#+cindex:@file{tsconfig.json} schema
Schema for the ~tsconfig.json~ file can be found at:
- http://json.schemastore.org/tsconfig


#+cindex:@file{tsconfig.json} file
#+cindex: configuration
#+cindex:TypeScript project
#+cindex:project, TypeScript
#+cindex:root files, TypeScript project
#+cindex:compiler options
The presence of a ~tsconfig.json~ file in a directory indicates that
the directory is the root of a TypeScript project.

A ~tsconfig.json~ file specifies:

- the root files
- the compiler options


{{{noindent}}}required to compile the project.

A ~tsconfig.json~ file is permitted to be completely empty, which
compiles all files included by default with the default compiler
options.  Compiler options specified on the command line override
those specified in the ~tsconfig.json~ file.

*** The =compilerOptions= Property
#+cindex:@code{compilerOptions} property
#+cindex:default compiler options
#+cindex:compiler options, defaults
The =compilerOptions= property can be omitted, in which case the
compiler’s defaults are used.

**** List of Compiler Options
For a complete list of compiler options, see:
- http://www.typescriptlang.org/docs/handbook/compiler-options.html


#+cindex:compiler options, list
#+attr_texinfo: :indic code
- --allowJs :: boolean =false=
- --allowSyntheticDefaultImports :: boolean module === "system" or
     --esModuleInterop
- --allowUmdGlobalAccess :: boolean =false=
- --allowUnreachableCode :: boolean =false=
- --allowUnusedLabels :: boolean =false=
- --alwaysStrict :: boolean false
- --baseUrl :: string; See [[http://www.typescriptlang.org/docs/handbook/module-resolution.html#base-url][Module Resolution documentation]]
- --build -b :: boolean =false=
- --charset :: string "utf8"
- --checkJs :: boolean =false=
- --composite :: boolean =true=
- --declaration -d :: boolean =false=
- --declarationDir :: string
- --declarationMap :: boolean =false=
- --diagnostics :: boolean =false=
- --disableSizeLimit :: boolean =false=
- --downlevelIteration :: boolean =false=
- --emitBOM :: boolean =false=
- --emitDeclarationOnly :: boolean =false=
- --emitDecoratorMetadata :: boolean =false=
- --esModuleInterop :: boolean =false=
- --experimentalDecorators :: boolean =false=
- --extendedDiagnostics :: boolean =false=
- --forceConsistentCasingInFileNames :: boolean =false=
- --help -h :: empty
- --importHelpers :: boolean =false=
- --incremental :: boolean =true= if composite; =false= otherwise
- --inlineSourceMap :: boolean =false=
- --inlineSources :: boolean =false=
- --init :: empty
- --isolatedModules :: boolean =false=
- --jsx :: string "preserve" | "react" | "react-native"
- --jsxFactory :: string "React.createElement" | "h"
- --keyofStringsOnly :: boolean =false=
- --lib :: string[] [default list of libraries are injected]
- --listEmittedFiles :: boolean =false=
- --listFiles :: boolean =false=
- --locale :: string "en"
- --mapRoot :: string
- --maxNodeModuleJsDepth :: number 0
- --module -m :: string target === "ES3" or "ES5" ? "CommonJS" : "ES6"
- --moduleResolution :: string module === "AMD" or "System" or "ES6" ?
     "Classic" : "Node"
- --newLine :: string "lf"
- --noEmit :: boolean =false=
- --noEmitHelpers :: boolean =false=
- --noEmitOnError :: boolean =false=
- --noErrorTruncation :: boolean =false=
- --noFallthroughCasesInSwitch :: boolean =false=
- --noImplicitAny :: boolean =false=
- --noImplicitReturns :: boolean =false=
- --noImplicitThis :: boolean =false=
- --noImplicitUseStrict :: boolean =false=
- --noLib :: boolean =false=
- --noResolve :: boolean =false=
- --noStrictGenericChecks :: boolean =false=
- --noUnusedLocals :: boolean =false=
- --noUnusedParameters :: boolean =false=
- --outDir :: string
- --outFile :: string
- paths :: Object
- --preserveConstEnums :: boolean =false=
- --preserveSymlinks :: boolean =false=
- --preserveWatchOutput :: boolean =false=
- --pretty :: boolean =true= unless piping or redirecting
- --project -p :: string
- --reactNamespace :: deprecated; use {{{option(--jsxFactory)}}}
- --removeComments :: boolean =false=
- --resolveJsonModule :: boolean =false=
- --rootDir :: string [computed from input files]
- rootDirs :: string[]
- --showConfig :: boolean =false=
- --skipDefaultLibCheck :: boolean =false=
- --skipLibCheck :: boolean =false=
- --sourceMap :: boolean =false=
- --sourceRoot :: string
- --strict :: boolean =false=
- --strictBindCallApply :: boolean =false=
- --strictFunctionTypes :: boolean =false=
- --strictPropertyInitialization :: boolean =false=
- --strictNullChecks :: boolean =false=
- --suppressExcessPropertyErrors :: boolean =false=
- --suppressImplicitAnyIndexErrors :: boolean =false=
- --target -t :: string "ES3"
- --traceResolution :: boolean =false=
- --tsBuildInfoFile :: boolean =false=
- --types :: string[]
- --typeRoots :: string[]
- --version -v :: [empty]
- --watch -w :: [empty]

*** The =files= and =include= and =exclude= Properties

#+cindex:@code{files} property
#+cindex:@code{include} property
#+cindex:@code{exclude} property
Files and can included or excluded from a project by using a
combination of the =files=, the =include=, and the =exclude=
properties, and the =outDir= compiler option in the ~tsconfig.json~
file.

{{{subheading(Include Defaults)}}}

If the =files= and =include= properties are both left unspecified, the
compiler defaults to including all TypeScript files in the containing
directory and subdirectories except those excluded using the =exclude=
property.  (See below for default extensions.)  JS files (see below)
are also included if =allowJs= is set to =true=.

{{{subheading(Including Files)}}}

If the =files= and/or =include= properties are specified, the compiler
will instead include the union of the files included by those two
properties.

Any files that are referenced via the =files= or =include= properties
are included.  Files included using =include= can be filtered using
the =exclude= property, but files included explicitly using the
=files= property are always included regardless of =exclude=.

Files in the directory specified using the =outDir= compiler option
are excluded as long as =exclude= property is /not/ specified.

If a file ~B.ts~ is referenced by another file ~A.ts~, then ~B.ts~
cannot be excluded unless the referencing file ~A.ts~ is also
specified in the =exclude= list.  The compiler does not include files
that can be possible outputs; e.g. if the input includes ~index.ts~,
then ~index.d.ts~ and ~index.js~ are excluded.

**** The =files= Property
#+cindex:@code{files} property
The =files= property takes a list of relative or absolute file paths.

**** The =include= and =exclude= Properties
#+cindex:@code{include} property
#+cindex:@code{exclude} property
#+cindex:glob patterns
#+cindex:wildcards, glob
The =include= and =exclude= properties take a list of glob-like file
patterns.  The supported glob wildcards are:

- =*= :: matches zero or more characters (excluding directory
         separators)

         If a segment of a glob pattern includes only =*= or =.*=,
         then only files with supported extensions are included.
         Supported extensions include:

  - =.ts=

  - =.tsx=

  - =.d.ts=

    If =allowJs= is set to =true=:

  - =.js=

  - =.jsx=

- =?= :: matches any one character (excluding directory separators)

- =**/= :: recursively matches any subdirectory


#+cindex:@file{node_modules}
#+cindex:@file{bower_components}
#+cindex:@file{jspm_packages}
#+cindex:@code{outDir} property
=exclude= by default excludes the following directories:

- ~node_modules~
- ~bower_components~
- ~jspm_packages~
- =outDir=

**** Including and Excluding Types Packages

#+cindex:types package
#+cindex:@file{index.d.ts} file
#+cindex:@code{types} field
A /types package/ is a folder with a file called ~index.d.ts~ or a
folder with a ~package.json~ that has a =types= field.

{{{subheading(Include @types Packages)}}}

#+cindex:@code{@@types} packages
By default all visible =@@types= packages are included in your
compilation.  Packages in ~node_modules/@types~ of any enclosing
folder are considered visible.  That means packages within the
following directores are visible:

- ~./node_modules/@types/~
- ~../node_modules/@types/~
- ~../../node_modules/@types/~


Automatic inclusion is only important if you’re using files with
global declarations (as opposed to files declared as modules).  If you
use an =import "foo"= statement, for instance, TypeScript may still
look through ~node_modules~ and ~node_modules/@types~ folders to find
the ~foo~ package.

{{{subheading(Exclude @types Packages)}}}

Specify ="types": []= to disable automatic inclusion of =@types=
packages.

{{{heading(typeRoots)}}}

If =typeRoots= is specified, only packages under =typeRoots= will be
included.  This config file will include all packages under
~./typings~, and no packages from ~./node_modules/@types~.

#+begin_src js
{
   "compilerOptions": {
       "typeRoots" : ["./typings"]
   }
}
#+end_src

{{{heading(types)}}}

If types is specified, only packages listed will be included.  This
~tsconfig.json~ file will only include ~./node_modules/@types/node~,
~./node_modules/@types/lodash~ and ~./node_modules/@types/express~.
Other packages under ~node_modules/@types/*~ will not be included.

#+begin_src js
{
   "compilerOptions": {
       "types" : ["node", "lodash", "express"]
   }
}
#+end_src

*** Example tsconfig.json Files
{{{heading("Files" Property)}}}

#+caption:tsconfig.json using the "files" property
#+name:tsconfig.json-using-files-property
#+begin_src js -n
{
    "compilerOptions": {
        "module": "commonjs",
        "noImplicitAny": true,
        "removeComments": true,
        "preserveConstEnums": true,
        "sourceMap": true
    },
    "files": [
        "core.ts",
        "sys.ts",
        "types.ts",
        "scanner.ts",
        "parser.ts",
        "utilities.ts",
        "binder.ts",
        "checker.ts",
        "emitter.ts",
        "program.ts",
        "commandLineParser.ts",
        "tsc.ts",
        "diagnosticInformationMap.generated.ts"
    ]
}
#+end_src

{{{heading("Include" and "Exclude" Properties)}}}

#+caption:tsconfig using the "include" and "exclude" properties
#+name:tsconfig.json-using-include-and-exclude-properties
#+begin_src js -n
{
    "compilerOptions": {
        "module": "system",
        "noImplicitAny": true,
        "removeComments": true,
        "preserveConstEnums": true,
        "outFile": "../../built/local/tsc.js",
        "sourceMap": true
    },
    "include": [
        "src/**/*"
    ],
    "exclude": [
        "node_modules",
        "**/*.spec.ts"
    ]
}
#+end_src
*** Extending Configuration
A ~tsconfig.json~ file can inherit configurations from another file
using the =extends= property.  The =extends= property is a top-level
property, along with =compilerOptions=, =files=, =includes=, and
=excludes.=.  The =extends= value is a string containing a path to
another configuration file to inherit from.

The configuration from the base file is loaded first, then overridden
by those in the inheriting config file.  If a circularity is
encountered, an error is reported.  All relative paths found in the
configuration file will be resolved relative to the configuration file
they originated in.

**** Example ~tsconfig.json~ Using =extends=
#+name:configs-base.json
#+begin_src js
{
  "compilerOptions": {
    "noImplicitAny": true,
    "strictNullChecks": true
  }
}
#+end_src

#+name:tsconfig.json-using-extends
#+begin_src js
{
  "extends": "./configs/base",
  "files": [
    "main.ts",
    "supplemental.ts"
  ]
}
#+end_src

#+name:tsconfig-nostrictnull
#+begin_src js
{
  "extends": "./tsconfig",
  "compilerOptions": {
    "strictNullChecks": false
  }
}
#+end_src

*** CompileOnSave
Setting a top-level property =compileOnSave= signals to the IDE to
generate all files for a given ~tsconfig.json~ upon saving.  This
feature is currently supported in Visual Studio 2015 with TypeScript
1.8.4 and above, and atom-typescript plugin.

#+name:tsconfig.json-compile-on-save
#+begin_src js
{
   "compileOnSave": true,
   "compilerOptions": {
       "noImplicitAny" : true
   }
}
#+end_src

** Compilation of a TypeScript Project

#+cindex:compilation
#+cindex:@file{tsconfig.json}
A project is compiled:

{{{heading(Using tsconfig.json)}}}

- By invoking {{{command(tsc)}}} with no input files, in which case
  the compiler searches for the ~tsconfig.json~ file starting in the
  current directory and continuing up the parent directory chain.

- By invoking {{{command(tsc)}}} with no input files and an
  {{{option(--project)}}} (or just {{{option(-p)}}}) command line
  option that specifies the path of a directory containing a
  ~tsconfig.json~ file, or a path to a valid ~.json~ file containing
  the configurations.


{{{heading(With Input Files)}}}

- By invoking {{{command(tsc)}}} with input files on the command line,
  in which case a ~tsconfig.json~ files are ignored.

** Project References
- http://www.typescriptlang.org/docs/handbook/project-references.html


#+cindex:project reference
/Project references/ are a new feature in TypeScript 3.0 that allow
you to structure your TypeScript programs into smaller pieces.  By
doing this, you can:

- greatly improve build times
- enforce logical separation between components
- organize your code in new and better ways


There is also a new mode for {{{command(tsc)}}}, the
{{{option(--build)}}} flag that works hand in hand with project
references to enable faster TypeScript builds.

*** The =references= Property
~tsconfig.json~ files have a new top-level property, =references=.
It’s an array of objects that specifies projects to reference:

#+name:tsconfig-with-references
#+begin_src js
{
    "compilerOptions": {
        // The usual
    },
    "references": [
        { "path": "../src" }
    ]
}
#+end_src

The =path= property of each reference can point to a directory
containing a ~tsconfig.json~ file, or to the config file itself (which
may have any name).

When you reference a project, new things happen:

- Importing modules from a referenced project will instead load its
  output declaration file (~.d.ts~)

- If the referenced project produces an =outFile=, the output file
  ~.d.ts~ file’s declarations will be visible in this project

- Build mode (see below) will automatically build the referenced
  project if needed


By separating into multiple projects, you can greatly improve the
speed of typechecking and compiling, reduce memory usage when using an
editor, and improve enforcement of the logical groupings of your
program

*** The =composite= Property
Referenced projects must have the new =composite= setting enabled.
This setting is needed to ensure TypeScript can quickly determine
where to find the outputs of the referenced project.

Enabling the composite flag changes a few things:

- The =rootDir= setting, if not explicitly set, defaults to the
  directory containing the ~tsconfig~ file

- All implementation files must be matched by an =include= pattern or
  listed in the files array.  If this constraint is violated, ~tsc~
  will inform you which files weren’t specified

- =declaration= must be turned on

*** The =prepend= Property
You can also enable prepending the output of a dependency using the
=prepend= option in a reference:

#+name:tsconfig-using-prepend
#+begin_src js
"references": [
       { "path": "../utils", "prepend": true }
   ]
#+end_src

Prepending a project will include the project’s output above the
output of the current project.  This works for both ~.js~ files and
~.d.ts~ files, and source map files will also be emitted correctly.

*** Build Mode
To preserve compatibility with existing build workflows, ~tsc~ will
not automatically build dependencies unless invoked with the
{{{option(--build)}}} switch.

A long-awaited feature is /smart incremental builds/ for TypeScript
projects.  In 3.0 you can use the {{{option(--build)}}} flag with
~tsc~.  This is effectively a new entry point for ~tsc~ that behaves
more like a build orchestrator than a simple compiler.

Running ~tsc --build~ (~tsc -b~ for short) will do the following:

- Find all referenced projects

- Detect if they are up-to-date

- Build out-of-date projects in the correct order


You can provide ~tsc -b~ with multiple config file paths (e.g. ~tsc -b
src test~).  Specifying the config file name itself is unnecessary if
it’s named ~tsconfig.json~.

You can specify any number of config files:

#+begin_example
> tsc -b                            # Use the tsconfig.json in the current directory
> tsc -b src                        # Use src/tsconfig.json
> tsc -b foo/prd.tsconfig.json bar  # Use foo/prd.tsconfig.json and bar/tsconfig.json
#+end_example

There are also some flags specific to tsc -b:

#+attr_texinfo: :indic option
- --verbose :: Prints out verbose logging to explain what’s going on
               (may be combined with any other flag)

- --dry :: Shows what would be done but doesn’t actually build anything

- --clean :: Deletes the outputs of the specified projects (may be
             combined with {{{option(--dry)}}})

- --force :: Act as if all projects are out of date

- --watch :: Watch mode (may not be combined with any flag except
             {{{option(--verbose)}}})

** Integrating with Build Tools

#+cindex:build tools
*** Babel
#+cindex:babel
{{{heading(Install Babel)}}}

: npm install @babel/cli @babel/core @babel/preset-typescript --save-dev

#+cindex:@file{.babelrc}
{{{heading(.babelrc File)}}}

#+begin_src js
{
  "presets": ["@babel/preset-typescript"]
}
#+end_src

{{{heading(Using Command Line Interface)}}}

: ./node_modules/.bin/babel --out-file bundle.js src/index.ts

{{{heading(package.json File)}}}

#+begin_src js
{
  "scripts": {
    "build": "babel --out-file bundle.js main.ts"
  },
}
#+end_src

{{{heading(Execute Babel from the command line)}}}

: npm run build
*** Browserify
{{{heading(Install Browserify)}}}

: npm install tsify

See:
- [[https://github.com/TypeStrong/tsify][tsify---Browsify plugin for TypeScript]]

{{{heading(Using Command Line Interface)}}}

: $ browserify main.ts -p [ tsify --noImplicitAny ] > bundle.js

{{{heading(Using API)}}}

#+begin_src js
var browserify = require("browserify");
var tsify = require("tsify");

browserify()
    .add("main.ts")
    .plugin("tsify", { noImplicitAny: true })
    .bundle()
    .pipe(process.stdout);
#+end_src
*** Duo
~due-typescript~: The typescript compiler plugin for ~duo~

See:
- [[https://github.com/frankwallis/duo-typescript][due-typescript]]
*** Grunt
TypeScript Compilation Task for GruntJS

{{{heading(Install grunt-ts)}}}

: npm install grunt-ts

See:
- [[https://github.com/TypeStrong/grunt-ts][grunt-ts]]

{{{heading(Basic Gruntfile.js File)}}}

#+begin_src js
module.exports = function(grunt) {
    grunt.initConfig({
        ts: {
            default : {
                src: ["**/*.ts", "!node_modules/**/*.ts"]
            }
        }
    });
    grunt.loadNpmTasks("grunt-ts");
    grunt.registerTask("default", ["ts"]);
};
#+end_src
*** Gulp
- [[https://github.com/ivogabe/gulp-typescript][gulp-typescript]] :: A gulp plugin for handling TypeScript compilation
     workflow.

{{{heading(Install gulp-typescript)}}}

: npm install gulp-typescript

{{{heading(Basic gulpfile.js)}}}

#+begin_src js
var gulp = require("gulp");
var ts = require("gulp-typescript");

gulp.task("default", function () {
    var tsResult = gulp.src("src/*.ts")
        .pipe(ts({
              noImplicitAny: true,
              out: "output.js"
        }));
    return tsResult.js.pipe(gulp.dest("built/local"));
});
#+end_src
*** Jspm
- [[https://github.com/Microsoft/TypeScriptSamples/tree/master/jspm][jspm]]
*** Webpack
- [[https://www.npmjs.com/package/ts-loader][ts-loader]] :: TypeScript loader for webpack

{{{heading(Install ts-loader)}}}

: npm install ts-loader --save-dev

{{{heading(Basic webpack.config.js when using Webpack 2)}}}

#+begin_src js
module.exports = {
    entry: "./src/index.tsx",
    output: {
        path: '/',
        filename: "bundle.js"
    },
    resolve: {
        extensions: [".tsx", ".ts", ".js", ".json"]
    },
    module: {
        rules: [
            // all files with a '.ts' or '.tsx' extension will be handled by 'ts-loader'
            { test: /\.tsx?$/, use: ["ts-loader"], exclude: /node_modules/ }
        ]
    }
}
#+end_src
* Types
#+cindex:types
** Boolean
#+cindex:boolean type
- =true=
- =false=


: let isDone: boolean = false;

** Number
#+cindex:number type
All numbers are floating-point values; numbers include binary, octal,
hexadecimal and decimal literals.

: let decimal: number = 6;
: let hex: number = 0xf00d;
: let binary: number = 0b1010;
: let octal: number = 0o744;

** String
#+cindex:string type
The type =string= refers to the textual datatype.  TypeScript uses
either double quotes or single quotes to surround string data.

: let color: string = "blue";
: color = 'red';

{{{heading(Template Strings)}}}

Template strings are strings surrounded by the backtick or backquote
character (=`=); template strings can span multiple lines and allow
embedded expressions using the syntax =${ expr }=.

: let sentence: string = `Hello, my name is ${ fullName }.`

** Array
#+cindex:array type
Array types can be written in one of two ways.

In the first, you use the type of the elements followed by =[]= to
denote an array of that element type:

: let list: number[] = [1, 2, 3];

The second way uses a generic array type, =Array<elemType>=:

: let list: Array<number> = [1, 2, 3];

** Tuple
#+cindex:tuple type
Tuple types allow you to express an array with a fixed number of
elements whose types are known, but need not be the same.

To represent a value as a pair of a string and a number:

#+begin_src js
// Declare a tuple type
let x: [string, number];
// Initialize it
x = ["hello", 10]; // OK
// Initialize it incorrectly
x = [10, "hello"]; // Error
#+end_src

When accessing an element with a known index, the correct type is
retrieved:

: console.log(x[0].substring(1)); // OK

** Enum
#+cindex:enum type
An enum is a way of giving more friendly names to sets of numeric
values.

#+begin_src js
enum Color {Red, Green, Blue}
let c: Color = Color.Green;
#+end_src

{{{heading(Enum Numbering)}}}

By default, enums begin numbering their members starting at 0.  You
can change this by manually setting the value of one of its members.
For example, we can start the previous example at 1 instead of 0:

#+begin_src js
enum Color {Red = 1, Green, Blue}
let c: Color = Color.Green;
#+end_src

{{{subheading(Manual Enum Numbering)}}}

Or, even manually set all the values in the enum:

#+begin_src js
enum Color {Red = 1, Green = 2, Blue = 4}
let c: Color = Color.Green;
#+end_src

{{{subheading(Enum Values to Name)}}}

A handy feature of enums is that you can also go from a numeric value
to the name of that value in the enum.  For example, if we had the
value 2 but weren’t sure what that mapped to in the Color enum above,
we could look up the corresponding name:

#+begin_src js
enum Color {Red = 1, Green, Blue}
let colorName: string = Color[2];

console.log(colorName); // Displays 'Green' as its value is 2 above
#+end_src

** Any
#+cindex:any type
We may need to describe the type of variables that we do not know when
we are writing an application.  These values may come from dynamic
content, e.g. from the user or a 3rd party library.  In these cases,
we want to opt-out of type checking and let the values pass through
compile-time checks.  To do so, we label these with the =any= type:

#+begin_src js
let notSure: any = 4;
notSure = "maybe a string instead";
notSure = false; // okay, definitely a boolean
#+end_src

{{{heading(Objects and Type =any=)}}}

Variables of type =Object= only allow you to assign =any= value to
them.  You can’t call arbitrary methods on them, even ones that
actually exist:

#+begin_src js
let notSure: any = 4;
notSure.ifItExists(); // okay, ifItExists might exist at runtime
notSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check)

let prettySure: Object = 4;
prettySure.toFixed(); // Error: Property 'toFixed' doesn't exist on type 'Object'.
#+end_src

The =any= type is also handy if you know some part of the type, but
perhaps not all of it.  For example, you may have an array but the
array has a mix of different types:

#+begin_src js
let list: any[] = [1, true, "free"];

list[1] = 100;
#+end_src

** Void
#+cindex:void type
The =void= type denotes the absence of having any type at all.  You
may commonly see this as the return type of functions that do not
return a value:

#+begin_src js
function warnUser(): void {
    console.log("This is my warning message");
}
#+end_src

Declaring variables of type =void= is not useful because you can only
assign =undefined= or =null= to them.

** Null
#+cindex:null type
The type =null= is the only value of this type.  It is a subtype of
all other types, though, which means you can assign =null= to any
other type, unless {{{option(--strictNullChecks)}}} is used, in which
case =null= can only be assigned to an =any= type.

** Undefined
#+cindex:undefined type
The type =undefined= is the only value of this type.  It is a subtype
of all other types as is =null=.  When
{{{option(--stringNullChecks)}}} is used, =undefined= can be assigned
to a type of =any= and =void=.

** Union Type
#+cindex:union type
In cases where you want to pass in either a =string= or =null= or
=undefined=, you can use the =union= type =string | null | undefined=.

** Never
#+cindex:never type
The =never= type represents the type of values that never occur.  For
instance, =never= is the return type for a function expression or an
arrow function expression that always throws an exception or one that
never returns.  Variables also acquire the type =never= when narrowed by
any type guards that can never be true.

The =never= type is a subtype of, and assignable to, every type;
however, no type is a subtype of, or assignable to, =never= (including
=any=).

Some examples of functions returning never:

#+begin_src js
// Function returning never must have unreachable end point
function error(message: string): never {
    throw new Error(message);
}

// Inferred return type is never
function fail() {
    return error("Something failed");
}

// Function returning never must have unreachable end point
function infiniteLoop(): never {
    while (true) {
    }
}
#+end_src

** Object
#+cindex:object type
The =object= is a type that represents the non-primitive type,
i.e. anything that is not =number=, =string=, =boolean=, =symbol=,
=null=, or =undefined=.

With object type, APIs like ~Object.create~ can be better
represented.  For example:

#+begin_src js
declare function create(o: object | null): void;

create({ prop: 0 }); // OK
create(null); // OK

create(42); // Error
create("string"); // Error
create(false); // Error
create(undefined); // Error
#+end_src

** Type Assertions
#+cindex:type assertions
Sometimes you’ll end up in a situation where you’ll know more about a
value than TypeScript does. Usually this will happen when you know the
type of some entity could be more specific than its current type.

/Type assertions/ are a way to tell the compiler “trust me, I know
what I’m doing.”  A type assertion is like a type cast in other
languages, but performs no special checking or restructuring of data.
It has no runtime impact, and is used purely by the compiler.
TypeScript assumes that you, the programmer, have performed any
special checks that you need.

Type assertions have two forms (that is, the forms are equivalent
symantically).

1. the “angle-bracket” syntax:

#+begin_src js
let someValue: any = "this is a string";

let strLength: number = (<string>someValue).length;
#+end_src

2. the other is the as-syntax:

#+begin_src js
let someValue: any = "this is a string";

let strLength: number = (someValue as string).length;
#+end_src

When using TypeScript with JSX, only =as=-style assertions are
allowed.
* Variables
** Var
*** Var Scoping Rules
{{{heading(Function Scope)}}}

#+cindex:function scope
#+cindex:@code{var} declaration
=var= declarations are accessible anywhere within their containing
function, module, namespace, or global scope regardless of the
containing block.  Parameters are also function scoped.

{{{subheading(Problems with Function Scope)}}}

One problem they exacerbate is the fact that it is not an error to
declare the same variable multiple times.  Variables can be
accidentally overwritten this way.

This also occurs within for-loops:

#+begin_src js
for (var i = 0; i < 10; i++) {
    setTimeout(function() { console.log(i); }, 100 * i);
}
#+end_src

{{{noindent}}}which produces the following output:

#+begin_example
10
10
10
10
10
10
10
10
10
10
#+end_example

~setTimeout~ will run a function after some number of milliseconds,
but only after the for loop has stopped executing; by the time the for
loop has stopped executing, the value of ~i~ is 10.  So each time the
given function gets called, it will print out 10!

#+cindex:IIFE
#+cindex:immediately invoked function expression
A common work around is to use an IIFE - an Immediately Invoked
Function Expression - to capture ~i~ at each iteration:

#+begin_src js
for (var i = 0; i < 10; i++) {
    // capture the current state of 'i'
    // by invoking a function with its current value
    (function(i) {
        setTimeout(function() { console.log(i); }, 100 * i);
    })(i);
}
#+end_src

The ~i~ in the parameter list actually shadows the ~i~ declared in the
for loop, and which is used to invoke the function.  The function
closes over the value of the parameter ~i~ when it is invoked, and
will be available to the ~setTimeout~ function when it runs much
later.

** Let
#+cindex:lexical scope
#+cindex:block scope
#+cindex:local variable
The =let= statement declares a block scope local variable, optionally
initializing it to a value.  The other difference between =var= and
=let= is that the latter is initialized to value only when parser
evaluates it.  The =let= does not create properties of the window
object when declared globally.  The main difference between =var= and
=let= is that the scope of a =var= variable is the entire enclosing
function.

#+begin_src js
var x = 'global';
let y = 'global';
console.log(this.x); // "global"
console.log(this.y); // undefined
#+end_src

When a variable is declared using ~let~, it uses what some call
lexical-scoping or block-scoping.  Unlike variables declared with
~var~, whose scopes leak out to their containing function,
block-scoped variables are not visible outside of their nearest
containing block or =for-loop=.

#+cindex:temporal dead zone
Another property of block-scoped variables is that they can’t be read
or written to before they’re actually declared.  While these variables
are “present” throughout their scope, all points up until their
declaration are part of their temporal dead zone.  This is just a
sophisticated way of saying you can’t access them before the ~let~
statement, and luckily TypeScript will let you know that.

You can still capture a block-scoped variable before it’s declared.
The only catch is that it’s illegal to call that function before the
declaration.  If targeting ES2015, a modern runtime will throw an
error; however, right now TypeScript is permissive and won’t report
this as an error.

#+begin_src js
function foo() {
    // okay to capture 'a'
    return a;
}

// illegal call 'foo' before 'a' is declared
// runtimes should throw an error here
foo();

let a;
#+end_src

*** Emulate Private Members
#+cindex:private member
In dealing with constructors it is possible to use the ~let~ bindings
to share one or more private members without using closures:

#+caption:Emulate private members using let
#+name:emulate-private-members-using-let
#+begin_src js -n
var Thing;

{ // BLOCK SCOPE
  let privateScope = new WeakMap(); // PRIVATE MEMBERS
  let counter = 0;

  Thing = function() {
    this.someProperty = 'foo';

    privateScope.set(this, {
      hidden: ++counter,
    });
  };

  Thing.prototype.showPublic = function() {
    return this.someProperty;
  };

  Thing.prototype.showPrivate = function() {
    return privateScope.get(this).hidden;
  };
}

console.log(typeof privateScope); // "undefined"

var thing = new Thing();

console.log(thing); // Thing {someProperty: "foo"}

thing.showPublic(); // "foo"

thing.showPrivate(); // 1
#+end_src

The same privacy pattern with closures over local variables can be
created with ~var~, but those need a function scope (typically an IIFE
in the module pattern) instead of just a block scope like in the
example above.

*** Temporal Dead Zone
Unlike variables declared with ~var~, which will start with the value
undefined, ~let~ variables are not initialized until their definition
is evaluated.  Accessing the variable before the initialization
results in a =ReferenceError=.  The variable is in a "temporal dead
zone" from the start of the block until the initialization is
processed.

Unlike with simply undeclared variables and variables that hold a
value of =undefined=, using the ~typeof~ operator to check for the
type of a variable in that variable's TDZ will throw a
=ReferenceError=:

** Const
~const~ declarations are another way of declaring variables.  They are
like ~let~ declarations but, as their name implies, their value cannot
be changed once they are bound.  In other words, they have the same
scoping rules as ~let~, but you can’t re-assign to them.  This should
not be confused with the idea that the values they refer to are
immutable.  Unless you take specific measures to avoid it, the
internal state of a ~const~ variable is still modifiable.
Fortunately, TypeScript allows you to specify that members of an
object are =readonly=

{{{heading(Principle of Least Privilege)}}}

#+cindex:least privilege
Applying the principle of /least privilege/, all declarations other
than those you plan to modify should use ~const~.  The rationale is
that if a variable didn’t need to get written to, others working on
the same codebase shouldn’t automatically be able to write to the
object, and will need to consider whether they really need to reassign
to the variable.  Using ~const~ also makes code more predictable when
reasoning about flow of data.
** Destructuring
*** Array Destructuring
#+cindex:destructuring
#+cindex:array destructuring
The simplest form of destructuring is array destructuring assignment:

#+begin_src js
let input = [1, 2];
let [first, second] = input; // first := 1, second := 2
#+end_src

This creates two new variables named first and second.  This is
equivalent to using indexing, but is much more convenient:

#+begin_src js
first = input[0];
second = input[1];
#+end_src

Destructuring works with already-declared variables as well:

#+begin_src js
// swap variables
[first, second] = [second, first];
#+end_src

And with parameters to a function:

#+begin_src js
function f([first, second]: [number, number]) {
    console.log(first);
    console.log(second);
}
f([1, 2]);
#+end_src

You can create a variable for the remaining items in a list using the
syntax ...:

#+begin_src js
let [first, ...rest] = [1, 2, 3, 4];
console.log(first); // outputs 1
console.log(rest); // outputs [ 2, 3, 4 ]
#+end_src

Of course, since this is JavaScript, you can just ignore trailing
elements you don’t care about:

#+begin_src js
let [first] = [1, 2, 3, 4];
console.log(first); // outputs 1
#+end_src

Or other elements:

#+begin_src js
let [, second, , fourth] = [1, 2, 3, 4];
console.log(second); // outputs 2
console.log(fourth); // outputs 4
#+end_src

*** Tuple Destructuring
#+cindex:destructuring
#+cindex:tuple destructuring
Tuples may be destructured like arrays; the destructuring variables
get the types of the corresponding tuple elements:

#+begin_src js
let tuple: [number, string, boolean] = [7, "hello", true];

let [a, b, c] = tuple; // a: number, b: string, c: boolean
#+end_src

It’s an error to destructure a tuple beyond the range of its elements.
As with arrays, you can destructure the rest of the tuple with ..., to
get a shorter tuple; and ignore trailing elements, or other elements.

*** Object Destructuring
#+cindex:destructuing
#+cindex:object destructuring
You can also destructure objects:

#+begin_src js
let o = {
    a: "foo",
    b: 12,
    c: "bar"
};
Let { a, b } = o;
#+end_src

This creates new variables ~a~ and ~b~ from ~o.a~ and ~o.b~.  Notice
that you can skip ~c~ if you don’t need it.

Like array destructuring, you can have assignment without declaration:

#+begin_src js
({ a, b } = { a: "baz", b: 101 });
#+end_src

Notice that we had to surround this statement with
parentheses. JavaScript normally parses a ={= as the start of block.

You can create a variable for the remaining items in an object using
the syntax ...:

#+begin_src js
let { a, ...passthrough } = o;
let total = passthrough.b + passthrough.c.length;
#+end_src

{{{heading(Property Renaming)}}}

#+pindex:property renaming
You can also give different names to properties:

#+begin_src js
let { a: newName1, b: newName2 } = o;
#+end_src

You can read ~a: newName1~ as “a as newName1”.  The direction is
left-to-right, as if you had written:

#+begin_src js
let newName1 = o.a;
let newName2 = o.b;
#+end_src

Confusingly, the colon here does not indicate the type.  The type, if
you specify it, still needs to be written after the entire
destructuring:

#+begin_src js
let { a, b }: { a: string, b: number } = o;
#+end_src

{{{heading(Default Values)}}}

#+cindex:default values
Default values let you specify a default value in case a property is
=undefined=:

#+begin_src js
function keepWholeObject(wholeObject: { a: string, b?: number }) {
    let { a, b = 1001 } = wholeObject;
}
#+end_src

In this example the ~b?~ indicates that ~b~ is optional, so it may be
=undefined=.  ~keepWholeObject~ now has a variable for ~wholeObject as
well as the properties ~a~ and ~b~, even if ~b~ is =undefined=.

*** Function Declarations and Destructuring
#+cindex:destructuring
#+cindex:function declarations and destructuring
Destructuring also works in function declarations. For simple cases
this is straightforward:

#+begin_src js
type C = { a: string, b?: number }
function f({ a, b }: C): void {
    // ...
}
#+end_src

But specifying defaults is more common for parameters, and getting
defaults right with destructuring can be tricky.  First of all, you
need to remember to put the pattern before the default value.

#+begin_src js
function f({ a="", b=0 } = {}): void {
    // ...
}
f();
#+end_src

Then, you need to remember to give a default for optional properties
on the destructured property instead of the main initializer.  Remember
that ~C~ was defined with ~b~ optional:

#+begin_src js
function f({ a, b=0 } = { a: "" }): void {
    // ...
}
f({ a: "yes" }); // ok, default b = 0
f(); // ok, default to { a: "" }, which then defaults b = 0
f({}); // error, 'a' is required if you supply an argument
#+end_src

Use destructuring with care.  As the previous example demonstrates,
anything but the simplest destructuring expression is confusing.  This
is especially true with deeply nested destructuring, which gets really
hard to understand even without piling on renaming, default values,
and type annotations.  Try to keep destructuring expressions small and
simple.  You can always write the assignments that destructuring would
generate yourself.
** Spreading
#+cindex:@code{spread} operator
#+cindex:spreading
The =spread= operator is the opposite of destructuring.  It allows you
to spread an array into another array, or an object into another
object.  For example:

#+begin_src js
let first = [1, 2];
let second = [3, 4];
let bothPlus = [0, ...first, ...second, 5];
#+end_src

#+cindex:shallow copy, @code{spread} operator
This gives ~bothPlus~ the value =[0, 1, 2, 3, 4, 5]=.  Spreading
creates a shallow copy of first and second.  They are not changed by
the spread.

You can also spread objects:

#+begin_src js
let defaults = { food: "spicy", price: "$$", ambiance: "noisy" };
let search = { ...defaults, food: "rich" };
#+end_src

Now search is ={ food: "rich", price: "$$", ambiance: "noisy" }=.
Object spreading is more complex than array spreading.  Like array
spreading, it proceeds from left-to-right, but the result is still an
object.  This means that properties that come later in the spread
object overwrite properties that come earlier.  So if we modify the
previous example to spread at the end:

#+begin_src js
let defaults = { food: "spicy", price: "$$", ambiance: "noisy" };
let search = { food: "rich", ...defaults };
#+end_src

Then the =food= property in defaults overwrites =food: "rich"=, which
is not what we want in this case.

Object spread also has a couple of other surprising limits.  First, it
only includes an objects’ own, enumerable properties.  Basically, that
means you lose methods when you spread instances of an object:

#+begin_src js
class C {
  p = 12;
  m() {
  }
}
let c = new C();
let clone = { ...c };
clone.p; // ok
clone.m(); // error!
#+end_src

Second, the Typescript compiler doesn’t allow spreads of type
parameters from generic functions.  That feature is expected in future
versions of the language.
* Supplementary Programs
:PROPERTIES:
:appendix: t
:END:

** Tide for Emacs
=Tide= --- TypeScript Interactive Development Environment for Emacs

- https://github.com/ananthakumaran/tide

*** Tide Installation
- Install ~node.js v0.12.0~ or greater.

- Make sure ~tsconfig.json~ or ~jsconfig.json~ is present in the root
  folder of the project.

- =Tide= is available in [[http://melpa.org/#/tide][melpa]].  You can install =tide= via
  ~package-install M-x package-install [ret] tide~

*** Tide Configuration

#+begin_src emacs-lisp -n
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+end_src

*** Tide Format Options

#+cindex:tide format options
#+cindex:format options, tide
Format options can be specified in multiple ways.

{{{heading(via elisp)}}}

#+findex:tide-format-options
#+name:tide-format-options
#+begin_src emacs-lisp
(setq tide-format-options 
      '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t
        :placeOpenBraceOnNewLineForFunctions nil))
#+end_src

{{{heading(via tsfmt.json)}}}

~tsfmt.json~ should be present in the root folder along with
~tsconfig.json~

#+pindex:@code{tsfmt.json}
#+name:tsfmt.json
#+begin_src js
{
  "indentSize": 4,
  "tabSize": 4,
  "insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
  "placeOpenBraceOnNewLineForFunctions": false,
  "placeOpenBraceOnNewLineForControlBlocks": false
}
#+end_src

** Makefile
:PROPERTIES:
:appendix: t
:END:
#+name:makefile
#+begin_src makefile -n :tangle makefile
SOURCE=TypeScript-Guide

info:	$(SOURCE).texi
	makeinfo $(SOURCE).texi

pdf:	$(SOURCE).texi
	pdftexi2dvi -q $(SOURCE).texi; \
	open $(SOURCE).pdf

clean-texi:
	-rm *.texi
clean-info:
	-rm *.info
clean-pdf:
	-rm *.pdf
clean-aux:
	-rm *.{aux,toc,log,cp,cps,pg,pgs,fn,fns}

clean: clean-texi clean-info clean-pdf clean-aux

phony:clean-texi clean-info clean-pdf clean-aux clean
#+end_src

* Concept Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:

* Program Index
:PROPERTIES:
:index:    pg
:unnumbered: t
:END:

* Function Index
:PROPERTIES:
:unnumbered: t
:index:    fn
:END:

* Copying
:PROPERTIES:
:copying:  t
:END:

Copyright {{{noindent}}}\copy 2019 {{{author}}} {{{theVersion}}}

* Macro Definitions                                                :noexport:

#+macro:theVersion Version {{{version}}} {{{date}}}
#+macro:noindent @@texinfo:@noindent @@
#+macro:heading @@texinfo:@heading@@ $1
#+macro:subheading @@texinfo:@subheading@@ $1
#+macro:command @@texinfo:@command{@@$1@@texinfo:}@@
#+macro:option @@texinfo:@option{@@$1@@texinfo:}@@

* Export Options                                                   :noexport:

** Texinfo Export Options

#+options: H:4
#+texinfo_filename:typescript-guide.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+subtitle:{{{theVersion}}}
#+subauthor:LOLH
#+texinfo_dir_category:Languages
#+texinfo_dir_title:TypeScript
#+texinfo_dir_desc:How to program using TypeScript
#+texinfo_printed_title:TypeScript Guide in Print

* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# End:
