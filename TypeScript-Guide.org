#+title:TypeScript Guide
#+author:Pinecone062
#+date:2019-08-13 19:20
#+macro:version 0.0.3

#+texinfo:@insertcopying

* Source Installation and Update
#+cindex:source
#+cindex:installation
#+cindex:updating

** About TypeScript
TypeScript is a superset of JavaScript that compiles to clean
JavaScript output.

- https://www.typescriptlang.org

** Source
TypeScript is being developed on GitHub and is open source.

- https://github.com/Microsoft/TypeScript

** Installation

Installation is performed by Node:

#+name:installation
#+option: :results output :exports none
#+begin_src sh :shebang "#!/usr/bin/env bash"
yarn global add typescript
#+end_src

** Updating

* Configuration and Compilation

** The ~tsconfig~ File
#+cindex:@code{tsconfig.json}
#+cindex:project, TypeScript
#+cindex:root files, TypeScript project
#+cindex:compiler options
The presence of a ~tsconfig.json~ file in a directory indicates that
the directory is the root of a TypeScript project.  A ~tsconfig.json~
file is permitted to be completely empty, which compiles all files
included by default with the default compiler options.  Compiler
options specified on the command line override those specified in the
~tsconfig.json~ file.

A ~tsconfig.json~ file specifies:

- the root files
- the compiler options


{{{noindent}}}required to compile the project.

*** Example tsconfig.json Files
{{{heading("Files" Property)}}}

#+caption:tsconfig.json using the "files" property
#+name:tsconfig.json-using-files-property
#+begin_src js -n
{
    "compilerOptions": {
        "module": "commonjs",
        "noImplicitAny": true,
        "removeComments": true,
        "preserveConstEnums": true,
        "sourceMap": true
    },
    "files": [
        "core.ts",
        "sys.ts",
        "types.ts",
        "scanner.ts",
        "parser.ts",
        "utilities.ts",
        "binder.ts",
        "checker.ts",
        "emitter.ts",
        "program.ts",
        "commandLineParser.ts",
        "tsc.ts",
        "diagnosticInformationMap.generated.ts"
    ]
}
#+end_src

{{{heading("Include" and "Exclude" Properties)}}}

#+caption:tsconfig using the "include" and "exclude" properties
#+name:tsconfig.json-using-include-and-exclude-properties
#+begin_src js -n
{
    "compilerOptions": {
        "module": "system",
        "noImplicitAny": true,
        "removeComments": true,
        "preserveConstEnums": true,
        "outFile": "../../built/local/tsc.js",
        "sourceMap": true
    },
    "include": [
        "src/**/*"
    ],
    "exclude": [
        "node_modules",
        "**/*.spec.ts"
    ]
}
#+end_src

*** The =compilerOptions= Property
#+cindex:@code{compilerOptions} property
#+cindex:default compiler options
#+cindex:compiler options, defaults
The =compilerOptions= property can be omitted, in which case the
compiler’s defaults are used.

*** The =files= Property
#+cindex:@code{files} property
The =files= property takes a list of relative or absolute file paths.

*** The =include= and =exclude= Properties
#+cindex:@code{include} property
#+cindex:@code{exclude} property
The =include= and =exclude= properties take a list of glob-like file
patterns.  The supported glob wildcards are:

- =*= :: matches zero or more characters (excluding directory
         separators)

         If a segment of a glob pattern includes only =*= or =.*=,
         then only files with supported extensions are included.
         Supported extensions include:

  - =.ts=

  - =.tsx=

  - =.d.ts=

    If =allowJs= is set to =true=:

  - =.js=

  - =.jsx=

- =?= :: matches any one character (excluding directory separators)

- =**/= :: recursively matches any subdirectory


Any files that are referenced via the =files= or =include= properties
are included.  Files included using =include= can be filtered using
the =exclude= property, but files included explicitly using the
=files= property are always included regardless of =exclude=.  Files
in the directory specified using the =outDir= compiler option are
excluded as long as =exclude= property is /not/ specified.


=exclude= by default excludes the following directories:

- ~node_modules~
- ~bower_components~
- ~jspm_packages~
- =outDir=


If a file ~B.ts~ is referenced by another file ~A.ts~, then ~B.ts~
cannot be excluded unless the referencing file ~A.ts~ is also
specified in the =exclude= list.  The compiler does not include files
that can be possible outputs; e.g. if the input includes ~index.ts~,
then ~index.d.ts~ and ~index.js~ are excluded.

*** Neither =files= nor =include= Properties
If the "files" and "include" are both left unspecified, the compiler
defaults to including all TypeScript files in the containing directory
and subdirectories except those excluded using the "exclude" property.
(See above for default extensions.)  JS files (see above) are also
included if =allowJs= is set to =true=.

If the "files" and/or "include" properties are specified, the compiler
will instead include the union of the files included by those two
properties.

*** Including and Excluding Types Packages

#+cindex:types package
#+cindex:@file{index.d.ts} file
#+cindex:@code{types} field
A /types package/ is a folder with a file called ~index.d.ts~ or a
folder with a ~package.json~ that has a =types= field.

{{{subheading(Include @types Packages)}}}

#+cindex:@code{@@types} packages
By default all visible =@@types= packages are included in your
compilation.  Packages in ~node_modules/@types~ of any enclosing
folder are considered visible.  That means packages within the
following directores are visible:

- ~./node_modules/@types/~
- ~../node_modules/@types/~
- ~../../node_modules/@types/~


Automatic inclusion is only important if you’re using files with
global declarations (as opposed to files declared as modules).  If you
use an =import "foo"= statement, for instance, TypeScript may still
look through ~node_modules~ and ~node_modules/@types~ folders to find
the ~foo~ package.

{{{subheading(Exclude @types Packages)}}}

Specify ="types": []= to disable automatic inclusion of =@types=
packages.

{{{heading(typeRoots)}}}

If =typeRoots= is specified, only packages under =typeRoots= will be
included.  This config file will include all packages under
~./typings~, and no packages from ~./node_modules/@types~.

#+begin_src js
{
   "compilerOptions": {
       "typeRoots" : ["./typings"]
   }
}
#+end_src

{{{heading(types)}}}

If types is specified, only packages listed will be included.  This
~tsconfig.json~ file will only include ~./node_modules/@types/node~,
~./node_modules/@types/lodash~ and ~./node_modules/@types/express~.
Other packages under ~node_modules/@types/*~ will not be included.

#+begin_src js
{
   "compilerOptions": {
       "types" : ["node", "lodash", "express"]
   }
}
#+end_src

** Compilation of a TypeScript Project

#+cindex:compilation
#+cindex:@file{tsconfig.json}
A project is compiled:

{{{heading(Using tsconfig.json)}}}

- By invoking {{{command(tsc)}}} with no input files, in which case
  the compiler searches for the ~tsconfig.json~ file starting in the
  current directory and continuing up the parent directory chain.

- By invoking {{{command(tsc)}}} with no input files and an
  {{{option(--project)}}} (or just {{{option(-p)}}}) command line
  option that specifies the path of a directory containing a
  ~tsconfig.json~ file, or a path to a valid ~.json~ file containing
  the configurations.


{{{heading(With Input Files)}}}

- By invoking {{{command(tsc)}}} with input files on the command line,
  in which case a ~tsconfig.json~ files are ignored.

* Supplementary Programs
:PROPERTIES:
:appendix: t
:END:

** Tide for Emacs
=Tide= --- TypeScript Interactive Development Environment for Emacs

- https://github.com/ananthakumaran/tide

*** Tide Installation
- Install ~node.js v0.12.0~ or greater.

- Make sure ~tsconfig.json~ or ~jsconfig.json~ is present in the root
  folder of the project.

- =Tide= is available in [[http://melpa.org/#/tide][melpa]].  You can install =tide= via
  ~package-install M-x package-install [ret] tide~

*** Tide Configuration

#+begin_src emacs-lisp -n
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+end_src

*** Tide Format Options

#+cindex:tide format options
#+cindex:format options, tide
Format options can be specified in multiple ways.

{{{heading(via elisp)}}}

#+findex:tide-format-options
#+name:tide-format-options
#+begin_src emacs-lisp
(setq tide-format-options 
      '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t
        :placeOpenBraceOnNewLineForFunctions nil))
#+end_src

{{{heading(via tsfmt.json)}}}

~tsfmt.json~ should be present in the root folder along with
~tsconfig.json~

#+pindex:@code{tsfmt.json}
#+name:tsfmt.json
#+begin_src js
{
  "indentSize": 4,
  "tabSize": 4,
  "insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
  "placeOpenBraceOnNewLineForFunctions": false,
  "placeOpenBraceOnNewLineForControlBlocks": false
}
#+end_src

** Makefile
:PROPERTIES:
:appendix: t
:END:
#+name:makefile
#+begin_src makefile -n :tangle makefile
SOURCE=TypeScript-Guide

info:	$(SOURCE).texi
	makeinfo $(SOURCE).texi

pdf:	$(SOURCE).texi
	pdftexi2dvi -q $(SOURCE).texi; \
	open $(SOURCE).pdf

clean-texi:
	-rm *.texi
clean-info:
	-rm *.info
clean-pdf:
	-rm *.pdf
clean-aux:
	-rm *.{aux,toc,log,cp,cps,pg,pgs,fn,fns}

clean: clean-texi clean-info clean-pdf clean-aux

phony:clean-texi clean-info clean-pdf clean-aux clean
#+end_src

* Concept Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:

* Program Index
:PROPERTIES:
:index:    pg
:unnumbered: t
:END:

* Function Index
:PROPERTIES:
:unnumbered: t
:index:    fn
:END:

* Copying
:PROPERTIES:
:copying:  t
:END:

Copyright {{{noindent}}}\copy 2019 {{{author}}} {{{theVersion}}}

* Macro Definitions                                                :noexport:

#+macro:theVersion Version {{{version}}} {{{date}}}
#+macro:noindent @@texinfo:@noindent @@
#+macro:heading @@texinfo:@heading@@ $1
#+macro:subheading @@texinfo:@subheading@@ $1
#+macro:command @@texinfo:@command{@@$1@@texinfo:}@@
#+macro:option @@texinfo:@option{@@$1@@texinfo:}@@

* Export Options                                                   :noexport:

** Texinfo Export Options

#+options: H:4
#+texinfo_filename:typescript-guide.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+subtitle:{{{theVersion}}}
#+subauthor:LOLH
#+texinfo_dir_category:Languages
#+texinfo_dir_title:TypeScript
#+texinfo_dir_desc:How to program using TypeScript
#+texinfo_printed_title:TypeScript Guide in Print

* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# End:
