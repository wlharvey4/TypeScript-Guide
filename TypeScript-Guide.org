#+title:TypeScript Guide
#+author:Pinecone062
#+date:2019-08-14 10:07
#+macro:version 0.0.7

#+texinfo:@insertcopying

* Source Installation and Update
#+cindex:source
#+cindex:installation
#+cindex:updating

** About TypeScript
TypeScript is a superset of JavaScript that compiles to clean
JavaScript output.

- https://www.typescriptlang.org

** Source
TypeScript is being developed on GitHub and is open source.

- https://github.com/Microsoft/TypeScript

** Installation

Installation is performed by Node:

#+name:installation
#+option: :results output :exports none
#+begin_src sh :shebang "#!/usr/bin/env bash"
yarn global add typescript
#+end_src

** Updating

* Configuration and Compilation

** The ~tsconfig~ File
#+cindex:schema, @file{tsconfig.json}
#+cindex:@file{tsconfig.json} schema
Schema for the ~tsconfig.json~ file can be found at:
- http://json.schemastore.org/tsconfig


#+cindex:@file{tsconfig.json} file
#+cindex: configuration
#+cindex:TypeScript project
#+cindex:project, TypeScript
#+cindex:root files, TypeScript project
#+cindex:compiler options
The presence of a ~tsconfig.json~ file in a directory indicates that
the directory is the root of a TypeScript project.

A ~tsconfig.json~ file specifies:

- the root files
- the compiler options


{{{noindent}}}required to compile the project.

A ~tsconfig.json~ file is permitted to be completely empty, which
compiles all files included by default with the default compiler
options.  Compiler options specified on the command line override
those specified in the ~tsconfig.json~ file.

*** The =compilerOptions= Property
#+cindex:@code{compilerOptions} property
#+cindex:default compiler options
#+cindex:compiler options, defaults
The =compilerOptions= property can be omitted, in which case the
compiler’s defaults are used.

**** List of Compiler Options
For a complete list of compiler options, see:
- http://www.typescriptlang.org/docs/handbook/compiler-options.html


#+cindex:compiler options, list
#+attr_texinfo: :indic code
- --allowJs :: boolean =false=
- --allowSyntheticDefaultImports :: boolean module === "system" or
     --esModuleInterop
- --allowUmdGlobalAccess :: boolean =false=
- --allowUnreachableCode :: boolean =false=
- --allowUnusedLabels :: boolean =false=
- --alwaysStrict :: boolean false
- --baseUrl :: string; See [[http://www.typescriptlang.org/docs/handbook/module-resolution.html#base-url][Module Resolution documentation]]
- --build -b :: boolean =false=
- --charset :: string "utf8"
- --checkJs :: boolean =false=
- --composite :: boolean =true=
- --declaration -d :: boolean =false=
- --declarationDir :: string
- --declarationMap :: boolean =false=
- --diagnostics :: boolean =false=
- --disableSizeLimit :: boolean =false=
- --downlevelIteration :: boolean =false=
- --emitBOM :: boolean =false=
- --emitDeclarationOnly :: boolean =false=
- --emitDecoratorMetadata :: boolean =false=
- --esModuleInterop :: boolean =false=
- --experimentalDecorators :: boolean =false=
- --extendedDiagnostics :: boolean =false=
- --forceConsistentCasingInFileNames :: boolean =false=
- --help -h :: empty
- --importHelpers :: boolean =false=
- --incremental :: boolean =true= if composite; =false= otherwise
- --inlineSourceMap :: boolean =false=
- --inlineSources :: boolean =false=
- --init :: empty
- --isolatedModules :: boolean =false=
- --jsx :: string "preserve" | "react" | "react-native"
- --jsxFactory :: string "React.createElement" | "h"
- --keyofStringsOnly :: boolean =false=
- --lib :: string[] [default list of libraries are injected]
- --listEmittedFiles :: boolean =false=
- --listFiles :: boolean =false=
- --locale :: string "en"
- --mapRoot :: string
- --maxNodeModuleJsDepth :: number 0
- --module -m :: string target === "ES3" or "ES5" ? "CommonJS" : "ES6"
- --moduleResolution :: string module === "AMD" or "System" or "ES6" ?
     "Classic" : "Node"
- --newLine :: string "lf"
- --noEmit :: boolean =false=
- --noEmitHelpers :: boolean =false=
- --noEmitOnError :: boolean =false=
- --noErrorTruncation :: boolean =false=
- --noFallthroughCasesInSwitch :: boolean =false=
- --noImplicitAny :: boolean =false=
- --noImplicitReturns :: boolean =false=
- --noImplicitThis :: boolean =false=
- --noImplicitUseStrict :: boolean =false=
- --noLib :: boolean =false=
- --noResolve :: boolean =false=
- --noStrictGenericChecks :: boolean =false=
- --noUnusedLocals :: boolean =false=
- --noUnusedParameters :: boolean =false=
- --outDir :: string
- --outFile :: string
- paths :: Object
- --preserveConstEnums :: boolean =false=
- --preserveSymlinks :: boolean =false=
- --preserveWatchOutput :: boolean =false=
- --pretty :: boolean =true= unless piping or redirecting
- --project -p :: string
- --reactNamespace :: deprecated; use {{{option(--jsxFactory)}}}
- --removeComments :: boolean =false=
- --resolveJsonModule :: boolean =false=
- --rootDir :: string [computed from input files]
- rootDirs :: string[]
- --showConfig :: boolean =false=
- --skipDefaultLibCheck :: boolean =false=
- --skipLibCheck :: boolean =false=
- --sourceMap :: boolean =false=
- --sourceRoot :: string
- --strict :: boolean =false=
- --strictBindCallApply :: boolean =false=
- --strictFunctionTypes :: boolean =false=
- --strictPropertyInitialization :: boolean =false=
- --strictNullChecks :: boolean =false=
- --suppressExcessPropertyErrors :: boolean =false=
- --suppressImplicitAnyIndexErrors :: boolean =false=
- --target -t :: string "ES3"
- --traceResolution :: boolean =false=
- --tsBuildInfoFile :: boolean =false=
- --types :: string[]
- --typeRoots :: string[]
- --version -v :: [empty]
- --watch -w :: [empty]

*** The =files= and =include= and =exclude= Properties

#+cindex:@code{files} property
#+cindex:@code{include} property
#+cindex:@code{exclude} property
Files and can included or excluded from a project by using a
combination of the =files=, the =include=, and the =exclude=
properties, and the =outDir= compiler option in the ~tsconfig.json~
file.

{{{subheading(Include Defaults)}}}

If the =files= and =include= properties are both left unspecified, the
compiler defaults to including all TypeScript files in the containing
directory and subdirectories except those excluded using the =exclude=
property.  (See below for default extensions.)  JS files (see below)
are also included if =allowJs= is set to =true=.

{{{subheading(Including Files)}}}

If the =files= and/or =include= properties are specified, the compiler
will instead include the union of the files included by those two
properties.

Any files that are referenced via the =files= or =include= properties
are included.  Files included using =include= can be filtered using
the =exclude= property, but files included explicitly using the
=files= property are always included regardless of =exclude=.

Files in the directory specified using the =outDir= compiler option
are excluded as long as =exclude= property is /not/ specified.

If a file ~B.ts~ is referenced by another file ~A.ts~, then ~B.ts~
cannot be excluded unless the referencing file ~A.ts~ is also
specified in the =exclude= list.  The compiler does not include files
that can be possible outputs; e.g. if the input includes ~index.ts~,
then ~index.d.ts~ and ~index.js~ are excluded.

**** The =files= Property
#+cindex:@code{files} property
The =files= property takes a list of relative or absolute file paths.

**** The =include= and =exclude= Properties
#+cindex:@code{include} property
#+cindex:@code{exclude} property
#+cindex:glob patterns
#+cindex:wildcards, glob
The =include= and =exclude= properties take a list of glob-like file
patterns.  The supported glob wildcards are:

- =*= :: matches zero or more characters (excluding directory
         separators)

         If a segment of a glob pattern includes only =*= or =.*=,
         then only files with supported extensions are included.
         Supported extensions include:

  - =.ts=

  - =.tsx=

  - =.d.ts=

    If =allowJs= is set to =true=:

  - =.js=

  - =.jsx=

- =?= :: matches any one character (excluding directory separators)

- =**/= :: recursively matches any subdirectory


#+cindex:@file{node_modules}
#+cindex:@file{bower_components}
#+cindex:@file{jspm_packages}
#+cindex:@code{outDir} property
=exclude= by default excludes the following directories:

- ~node_modules~
- ~bower_components~
- ~jspm_packages~
- =outDir=

**** Including and Excluding Types Packages

#+cindex:types package
#+cindex:@file{index.d.ts} file
#+cindex:@code{types} field
A /types package/ is a folder with a file called ~index.d.ts~ or a
folder with a ~package.json~ that has a =types= field.

{{{subheading(Include @types Packages)}}}

#+cindex:@code{@@types} packages
By default all visible =@@types= packages are included in your
compilation.  Packages in ~node_modules/@types~ of any enclosing
folder are considered visible.  That means packages within the
following directores are visible:

- ~./node_modules/@types/~
- ~../node_modules/@types/~
- ~../../node_modules/@types/~


Automatic inclusion is only important if you’re using files with
global declarations (as opposed to files declared as modules).  If you
use an =import "foo"= statement, for instance, TypeScript may still
look through ~node_modules~ and ~node_modules/@types~ folders to find
the ~foo~ package.

{{{subheading(Exclude @types Packages)}}}

Specify ="types": []= to disable automatic inclusion of =@types=
packages.

{{{heading(typeRoots)}}}

If =typeRoots= is specified, only packages under =typeRoots= will be
included.  This config file will include all packages under
~./typings~, and no packages from ~./node_modules/@types~.

#+begin_src js
{
   "compilerOptions": {
       "typeRoots" : ["./typings"]
   }
}
#+end_src

{{{heading(types)}}}

If types is specified, only packages listed will be included.  This
~tsconfig.json~ file will only include ~./node_modules/@types/node~,
~./node_modules/@types/lodash~ and ~./node_modules/@types/express~.
Other packages under ~node_modules/@types/*~ will not be included.

#+begin_src js
{
   "compilerOptions": {
       "types" : ["node", "lodash", "express"]
   }
}
#+end_src

*** Example tsconfig.json Files
{{{heading("Files" Property)}}}

#+caption:tsconfig.json using the "files" property
#+name:tsconfig.json-using-files-property
#+begin_src js -n
{
    "compilerOptions": {
        "module": "commonjs",
        "noImplicitAny": true,
        "removeComments": true,
        "preserveConstEnums": true,
        "sourceMap": true
    },
    "files": [
        "core.ts",
        "sys.ts",
        "types.ts",
        "scanner.ts",
        "parser.ts",
        "utilities.ts",
        "binder.ts",
        "checker.ts",
        "emitter.ts",
        "program.ts",
        "commandLineParser.ts",
        "tsc.ts",
        "diagnosticInformationMap.generated.ts"
    ]
}
#+end_src

{{{heading("Include" and "Exclude" Properties)}}}

#+caption:tsconfig using the "include" and "exclude" properties
#+name:tsconfig.json-using-include-and-exclude-properties
#+begin_src js -n
{
    "compilerOptions": {
        "module": "system",
        "noImplicitAny": true,
        "removeComments": true,
        "preserveConstEnums": true,
        "outFile": "../../built/local/tsc.js",
        "sourceMap": true
    },
    "include": [
        "src/**/*"
    ],
    "exclude": [
        "node_modules",
        "**/*.spec.ts"
    ]
}
#+end_src
*** Extending Configuration
A ~tsconfig.json~ file can inherit configurations from another file
using the =extends= property.  The =extends= property is a top-level
property, along with =compilerOptions=, =files=, =includes=, and
=excludes.=.  The =extends= value is a string containing a path to
another configuration file to inherit from.

The configuration from the base file is loaded first, then overridden
by those in the inheriting config file.  If a circularity is
encountered, an error is reported.  All relative paths found in the
configuration file will be resolved relative to the configuration file
they originated in.

**** Example ~tsconfig.json~ Using =extends=
#+name:configs-base.json
#+begin_src js
{
  "compilerOptions": {
    "noImplicitAny": true,
    "strictNullChecks": true
  }
}
#+end_src

#+name:tsconfig.json-using-extends
#+begin_src js
{
  "extends": "./configs/base",
  "files": [
    "main.ts",
    "supplemental.ts"
  ]
}
#+end_src

#+name:tsconfig-nostrictnull
#+begin_src js
{
  "extends": "./tsconfig",
  "compilerOptions": {
    "strictNullChecks": false
  }
}
#+end_src

*** CompileOnSave
Setting a top-level property =compileOnSave= signals to the IDE to
generate all files for a given ~tsconfig.json~ upon saving.  This
feature is currently supported in Visual Studio 2015 with TypeScript
1.8.4 and above, and atom-typescript plugin.

#+name:tsconfig.json-compile-on-save
#+begin_src js
{
   "compileOnSave": true,
   "compilerOptions": {
       "noImplicitAny" : true
   }
}
#+end_src

** Compilation of a TypeScript Project

#+cindex:compilation
#+cindex:@file{tsconfig.json}
A project is compiled:

{{{heading(Using tsconfig.json)}}}

- By invoking {{{command(tsc)}}} with no input files, in which case
  the compiler searches for the ~tsconfig.json~ file starting in the
  current directory and continuing up the parent directory chain.

- By invoking {{{command(tsc)}}} with no input files and an
  {{{option(--project)}}} (or just {{{option(-p)}}}) command line
  option that specifies the path of a directory containing a
  ~tsconfig.json~ file, or a path to a valid ~.json~ file containing
  the configurations.


{{{heading(With Input Files)}}}

- By invoking {{{command(tsc)}}} with input files on the command line,
  in which case a ~tsconfig.json~ files are ignored.

** Project References
- http://www.typescriptlang.org/docs/handbook/project-references.html


#+cindex:project reference
/Project references/ are a new feature in TypeScript 3.0 that allow
you to structure your TypeScript programs into smaller pieces.  By
doing this, you can:

- greatly improve build times
- enforce logical separation between components
- organize your code in new and better ways


There is also a new mode for {{{command(tsc)}}}, the
{{{option(--build)}}} flag that works hand in hand with project
references to enable faster TypeScript builds.

*** The =references= Property
~tsconfig.json~ files have a new top-level property, =references=.
It’s an array of objects that specifies projects to reference:

#+name:tsconfig-with-references
#+begin_src js
{
    "compilerOptions": {
        // The usual
    },
    "references": [
        { "path": "../src" }
    ]
}
#+end_src

The =path= property of each reference can point to a directory
containing a ~tsconfig.json~ file, or to the config file itself (which
may have any name).

When you reference a project, new things happen:

- Importing modules from a referenced project will instead load its
  output declaration file (~.d.ts~)

- If the referenced project produces an =outFile=, the output file
  ~.d.ts~ file’s declarations will be visible in this project

- Build mode (see below) will automatically build the referenced
  project if needed


By separating into multiple projects, you can greatly improve the
speed of typechecking and compiling, reduce memory usage when using an
editor, and improve enforcement of the logical groupings of your
program

*** The =composite= Property
Referenced projects must have the new =composite= setting enabled.
This setting is needed to ensure TypeScript can quickly determine
where to find the outputs of the referenced project.

Enabling the composite flag changes a few things:

- The =rootDir= setting, if not explicitly set, defaults to the
  directory containing the ~tsconfig~ file

- All implementation files must be matched by an =include= pattern or
  listed in the files array.  If this constraint is violated, ~tsc~
  will inform you which files weren’t specified

- =declaration= must be turned on

*** The =prepend= Property
You can also enable prepending the output of a dependency using the
=prepend= option in a reference:

#+name:tsconfig-using-prepend
#+begin_src js
"references": [
       { "path": "../utils", "prepend": true }
   ]
#+end_src

Prepending a project will include the project’s output above the
output of the current project.  This works for both ~.js~ files and
~.d.ts~ files, and source map files will also be emitted correctly.

*** Build Mode
To preserve compatibility with existing build workflows, ~tsc~ will
not automatically build dependencies unless invoked with the
{{{option(--build)}}} switch.

A long-awaited feature is /smart incremental builds/ for TypeScript
projects.  In 3.0 you can use the {{{option(--build)}}} flag with
~tsc~.  This is effectively a new entry point for ~tsc~ that behaves
more like a build orchestrator than a simple compiler.

Running ~tsc --build~ (~tsc -b~ for short) will do the following:

- Find all referenced projects

- Detect if they are up-to-date

- Build out-of-date projects in the correct order


You can provide ~tsc -b~ with multiple config file paths (e.g. ~tsc -b
src test~).  Specifying the config file name itself is unnecessary if
it’s named ~tsconfig.json~.

You can specify any number of config files:

#+begin_example
> tsc -b                            # Use the tsconfig.json in the current directory
> tsc -b src                        # Use src/tsconfig.json
> tsc -b foo/prd.tsconfig.json bar  # Use foo/prd.tsconfig.json and bar/tsconfig.json
#+end_example

There are also some flags specific to tsc -b:

#+attr_texinfo: :indic option
- --verbose :: Prints out verbose logging to explain what’s going on
               (may be combined with any other flag)

- --dry :: Shows what would be done but doesn’t actually build anything

- --clean :: Deletes the outputs of the specified projects (may be
             combined with {{{option(--dry)}}})

- --force :: Act as if all projects are out of date

- --watch :: Watch mode (may not be combined with any flag except
             {{{option(--verbose)}}})

* Supplementary Programs
:PROPERTIES:
:appendix: t
:END:

** Tide for Emacs
=Tide= --- TypeScript Interactive Development Environment for Emacs

- https://github.com/ananthakumaran/tide

*** Tide Installation
- Install ~node.js v0.12.0~ or greater.

- Make sure ~tsconfig.json~ or ~jsconfig.json~ is present in the root
  folder of the project.

- =Tide= is available in [[http://melpa.org/#/tide][melpa]].  You can install =tide= via
  ~package-install M-x package-install [ret] tide~

*** Tide Configuration

#+begin_src emacs-lisp -n
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+end_src

*** Tide Format Options

#+cindex:tide format options
#+cindex:format options, tide
Format options can be specified in multiple ways.

{{{heading(via elisp)}}}

#+findex:tide-format-options
#+name:tide-format-options
#+begin_src emacs-lisp
(setq tide-format-options 
      '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t
        :placeOpenBraceOnNewLineForFunctions nil))
#+end_src

{{{heading(via tsfmt.json)}}}

~tsfmt.json~ should be present in the root folder along with
~tsconfig.json~

#+pindex:@code{tsfmt.json}
#+name:tsfmt.json
#+begin_src js
{
  "indentSize": 4,
  "tabSize": 4,
  "insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
  "placeOpenBraceOnNewLineForFunctions": false,
  "placeOpenBraceOnNewLineForControlBlocks": false
}
#+end_src

** Makefile
:PROPERTIES:
:appendix: t
:END:
#+name:makefile
#+begin_src makefile -n :tangle makefile
SOURCE=TypeScript-Guide

info:	$(SOURCE).texi
	makeinfo $(SOURCE).texi

pdf:	$(SOURCE).texi
	pdftexi2dvi -q $(SOURCE).texi; \
	open $(SOURCE).pdf

clean-texi:
	-rm *.texi
clean-info:
	-rm *.info
clean-pdf:
	-rm *.pdf
clean-aux:
	-rm *.{aux,toc,log,cp,cps,pg,pgs,fn,fns}

clean: clean-texi clean-info clean-pdf clean-aux

phony:clean-texi clean-info clean-pdf clean-aux clean
#+end_src

* Concept Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:

* Program Index
:PROPERTIES:
:index:    pg
:unnumbered: t
:END:

* Function Index
:PROPERTIES:
:unnumbered: t
:index:    fn
:END:

* Copying
:PROPERTIES:
:copying:  t
:END:

Copyright {{{noindent}}}\copy 2019 {{{author}}} {{{theVersion}}}

* Macro Definitions                                                :noexport:

#+macro:theVersion Version {{{version}}} {{{date}}}
#+macro:noindent @@texinfo:@noindent @@
#+macro:heading @@texinfo:@heading@@ $1
#+macro:subheading @@texinfo:@subheading@@ $1
#+macro:command @@texinfo:@command{@@$1@@texinfo:}@@
#+macro:option @@texinfo:@option{@@$1@@texinfo:}@@

* Export Options                                                   :noexport:

** Texinfo Export Options

#+options: H:4
#+texinfo_filename:typescript-guide.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+subtitle:{{{theVersion}}}
#+subauthor:LOLH
#+texinfo_dir_category:Languages
#+texinfo_dir_title:TypeScript
#+texinfo_dir_desc:How to program using TypeScript
#+texinfo_printed_title:TypeScript Guide in Print

* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# End:
